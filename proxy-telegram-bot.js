const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
const BOT_TOKEN = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ Telegram ID)
const ADMIN_IDS = process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [123456789];

// URL –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || '';

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
const CLIENTS_CONFIG_PATH = './clients-config.json';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤
let clientsConfig = {};

function loadClientsConfig() {
  try {
    if (fs.existsSync(CLIENTS_CONFIG_PATH)) {
      const data = fs.readFileSync(CLIENTS_CONFIG_PATH, 'utf8');
      clientsConfig = JSON.parse(data);
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    } else {
      console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      saveClientsConfig();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    clientsConfig = {};
  }
}

function saveClientsConfig() {
  try {
    fs.writeFileSync(CLIENTS_CONFIG_PATH, JSON.stringify(clientsConfig, null, 2));
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId) {
  return ADMIN_IDS.includes(userId);
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
const userStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ip:port:user:pass –≤ http://user:pass@ip:port
function convertProxyFormat(proxyLine) {
  const parts = proxyLine.trim().split(':');
  if (parts.length === 4) {
    const [ip, port, username, password] = parts;
    return `http://${username}:${password}@${ip}:${port}`;
  }
  return null;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
  return {
    reply_markup: {
      keyboard: [
        ['üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'],
        ['üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚ùì –ü–æ–º–æ—â—å']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (!isAdmin(userId)) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    return;
  }

  const welcomeMessage = `
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –≤–∞—à–µ–º Railway —Å–µ—Ä–≤–µ—Ä–µ.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
  `;

  bot.sendMessage(chatId, welcomeMessage, { 
    parse_mode: 'Markdown',
    ...getMainMenu()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  if (!isAdmin(userId)) {
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userStates[userId]) {
    await handleUserState(chatId, userId, text);
    return;
  }

  switch (text) {
    case 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤':
      await showClientsList(chatId);
      break;

    case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
      await startAddClient(chatId, userId);
      break;

    case 'üóë –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
      await showDeleteClientMenu(chatId, userId);
      break;

    case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä':
      await updateServerConfig(chatId);
      break;

    case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
      await showStatistics(chatId);
      break;

    case '‚ùì –ü–æ–º–æ—â—å':
      await showHelp(chatId);
      break;

    default:
      if (text && !text.startsWith('/')) {
        bot.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:', getMainMenu());
      }
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function showClientsList(chatId) {
  if (Object.keys(clientsConfig).length === 0) {
    bot.sendMessage(chatId, 'üì≠ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç.', getMainMenu());
    return;
  }

  let message = 'üìã *–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n';
  
  Object.keys(clientsConfig).forEach((clientName, index) => {
    const client = clientsConfig[clientName];
    message += `${index + 1}. *${clientName}*\n`;
    message += `   üîë –ü–∞—Ä–æ–ª—å: \`${client.password}\`\n`;
    message += `   üåê –ü—Ä–æ–∫—Å–∏: ${client.proxies.length} —à—Ç.\n\n`;
  });

  bot.sendMessage(chatId, message, { 
    parse_mode: 'Markdown',
    ...getMainMenu()
  });
}

// –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
async function startAddClient(chatId, userId) {
  userStates[userId] = {
    step: 'waiting_client_name',
    data: {}
  };

  bot.sendMessage(chatId, '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: client1):', {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function showDeleteClientMenu(chatId, userId) {
  if (Object.keys(clientsConfig).length === 0) {
    bot.sendMessage(chatId, 'üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', getMainMenu());
    return;
  }

  const keyboard = Object.keys(clientsConfig).map(clientName => [clientName]);
  keyboard.push(['‚ùå –û—Ç–º–µ–Ω–∞']);

  userStates[userId] = {
    step: 'waiting_delete_client',
    data: {}
  };

  bot.sendMessage(chatId, 'üóë *–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
    parse_mode: 'Markdown',
    reply_markup: {
      keyboard: keyboard,
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserState(chatId, userId, text) {
  const state = userStates[userId];

  if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
    delete userStates[userId];
    bot.sendMessage(chatId, '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', getMainMenu());
    return;
  }

  switch (state.step) {
    case 'waiting_client_name':
      if (!text || text.trim() === '') {
        bot.sendMessage(chatId, '‚ùå –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      if (clientsConfig[text]) {
        bot.sendMessage(chatId, '‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:');
        return;
      }

      state.data.clientName = text.trim();
      state.step = 'waiting_password';
      
      bot.sendMessage(chatId, `‚úÖ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: *${text}*\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É:`, {
        parse_mode: 'Markdown'
      });
      break;

    case 'waiting_password':
      if (!text || text.trim() === '') {
        bot.sendMessage(chatId, '‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      state.data.password = text.trim();
      state.step = 'waiting_proxies';
      
      bot.sendMessage(chatId, `‚úÖ –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`ip:port:username:password\`\n\n–ü—Ä–∏–º–µ—Ä:\n\`31.44.190.27:9625:512sdn:M0HBKk\n31.44.188.247:9656:512sdn:M0HBKk\`\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:`, {
        parse_mode: 'Markdown'
      });
      break;

    case 'waiting_proxies':
      if (!text || text.trim() === '') {
        bot.sendMessage(chatId, '‚ùå –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      const proxyLines = text.trim().split('\n');
      const proxies = [];
      const invalidProxies = [];

      proxyLines.forEach((line, index) => {
        const convertedProxy = convertProxyFormat(line);
        if (convertedProxy) {
          proxies.push(convertedProxy);
        } else {
          invalidProxies.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line}`);
        }
      });

      if (invalidProxies.length > 0) {
        bot.sendMessage(chatId, `‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:\n\n${invalidProxies.join('\n')}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω–æ–≤–æ:`);
        return;
      }

      if (proxies.length === 0) {
        bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      clientsConfig[state.data.clientName] = {
        password: state.data.password,
        proxies: proxies
      };

      saveClientsConfig();
      delete userStates[userId];

      bot.sendMessage(chatId, `‚úÖ *–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\nüë§ –ò–º—è: *${state.data.clientName}*\nüîë –ü–∞—Ä–æ–ª—å: \`${state.data.password}\`\nüåê –ü—Ä–æ–∫—Å–∏: ${proxies.length} —à—Ç.\n\nüí° –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!`, {
        parse_mode: 'Markdown',
        ...getMainMenu()
      });
      break;

    case 'waiting_delete_client':
      if (!clientsConfig[text]) {
        bot.sendMessage(chatId, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:');
        return;
      }

      const clientToDelete = clientsConfig[text];
      delete clientsConfig[text];
      saveClientsConfig();
      delete userStates[userId];

      bot.sendMessage(chatId, `‚úÖ *–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω!*\n\nüë§ –ò–º—è: *${text}*\nüåê –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: ${clientToDelete.proxies.length} —à—Ç.\n\nüí° –ù–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!`, {
        parse_mode: 'Markdown',
        ...getMainMenu()
      });
      break;
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
async function updateServerConfig(chatId) {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON —Ñ–∞–π–ª
    saveClientsConfig();
    
    let reloadResult = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ URL —É–∫–∞–∑–∞–Ω)
    if (PROXY_SERVER_URL) {
      try {
        const fetch = (await import('node-fetch')).default;
        const response = await fetch(`${PROXY_SERVER_URL}/reload-config`, {
          method: 'POST',
          timeout: 5000
        });
        reloadResult = await response.json();
        console.log('‚úÖ Proxy server auto-reload successful:', reloadResult);
      } catch (err) {
        console.log('‚ö†Ô∏è Auto-reload failed (but config saved):', err.message);
      }
    }
    
    const message = reloadResult 
      ? `‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\nüìä –ö–ª–∏–µ–Ω—Ç–æ–≤: ${Object.keys(clientsConfig).length}\nüîÑ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞*\n\nüí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!`
      : `‚úÖ *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\nüìä –ö–ª–∏–µ–Ω—Ç–æ–≤: ${Object.keys(clientsConfig).length}\nüìÅ –§–∞–π–ª: clients-config.json\n\n${PROXY_SERVER_URL ? '‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å' : 'üí° –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è'}`;
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      ...getMainMenu()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.', getMainMenu());
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
async function showStatistics(chatId) {
  const totalClients = Object.keys(clientsConfig).length;
  let totalProxies = 0;
  let clientStats = '';

  Object.keys(clientsConfig).forEach((clientName, index) => {
    const client = clientsConfig[clientName];
    totalProxies += client.proxies.length;
    clientStats += `${index + 1}. *${clientName}*: ${client.proxies.length} –ø—Ä–æ–∫—Å–∏\n`;
  });

  const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\nüë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: *${totalClients}*\nüåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: *${totalProxies}*\n\n*–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:*\n${clientStats || '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤'}`;

  bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    ...getMainMenu()
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
async function showHelp(chatId) {
  const helpMessage = `
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

üìã *–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤* - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö –ø–∞—Ä–æ–ª—è–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–∫—Å–∏

‚ûï *–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞* - –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:
   1. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
   2. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`ip:port:user:pass\`

üóë *–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞* - —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –ø—Ä–æ–∫—Å–∏

üîÑ *–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä* - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –ø—Ä–æ–∫—Å–∏

*–§–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:*
\`31.44.190.27:9625:512sdn:M0HBKk\`
–≥–¥–µ: IP:PORT:USERNAME:PASSWORD

*–í–∞–∂–Ω–æ:* –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"!
  `;

  bot.sendMessage(chatId, helpMessage, {
    parse_mode: 'Markdown',
    ...getMainMenu()
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadClientsConfig();

console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω!');
console.log(`üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: ${ADMIN_IDS.join(', ')}`);
console.log(`üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${CLIENTS_CONFIG_PATH}`);
console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä URL: ${PROXY_SERVER_URL || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

process.on('SIGINT', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit(0);
});
