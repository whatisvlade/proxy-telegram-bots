// telegram-bot.js ‚Äî Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (SIMPLE FORMAT)
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs').promises;
const path = require('path');

// ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –° –ü–û–î–î–ï–†–ñ–ö–û–ô RAILWAY –ü–ï–†–ï–ú–ï–ù–ù–´–• ======
const BOT_TOKEN = process.env.BOT_TOKEN;

// ‚úÖ –ü–û–î–î–ï–†–ñ–ö–ê –†–ê–ó–ù–´–• –§–û–†–ú–ê–¢–û–í –ü–ï–†–ï–ú–ï–ù–ù–´–•
let ADMIN_IDS = [];
let SUPER_ADMIN_ID = null;
let MANAGER_IDS = [];

// –í–∞—Ä–∏–∞–Ω—Ç 1: –ï–¥–∏–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_IDS
if (process.env.ADMIN_IDS) {
  ADMIN_IDS = process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())).filter(Boolean);
  SUPER_ADMIN_ID = ADMIN_IDS[0];
  MANAGER_IDS = ADMIN_IDS.slice(1);
}
// –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPER_ADMIN –∏ MANAGER_IDS
else {
  if (process.env.SUPER_ADMIN) {
    SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN.trim());
    ADMIN_IDS.push(SUPER_ADMIN_ID);
  }
  
  if (process.env.MANAGER_IDS) {
    MANAGER_IDS = process.env.MANAGER_IDS.split(',').map(id => parseInt(id.trim())).filter(Boolean);
    ADMIN_IDS.push(...MANAGER_IDS);
  }
}

console.log('üîê –û–¢–õ–ê–î–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:');
console.log(`   BOT_TOKEN: ${BOT_TOKEN ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`   ADMIN_IDS env: "${process.env.ADMIN_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"`);
console.log(`   SUPER_ADMIN env: "${process.env.SUPER_ADMIN || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"`);
console.log(`   MANAGER_IDS env: "${process.env.MANAGER_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"`);
console.log(`   ADMIN_IDS array: [${ADMIN_IDS.join(', ')}]`);
console.log(`   SUPER_ADMIN_ID: ${SUPER_ADMIN_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`   MANAGER_IDS: [${MANAGER_IDS.join(', ')}]`);

const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || 'http://localhost:8080';
const API_AUTH = Buffer.from(`${process.env.API_USERNAME || 'telegram_bot'}:${process.env.API_PASSWORD || 'bot_secret_2024'}`).toString('base64');

const CONFIG_FILE = path.join(__dirname, 'clients-config.json');
const PORT = process.env.PORT || 8080;

// ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const app = express();
app.use(express.json({ limit: '10mb' }));

let clientsConfig = {};

// ====== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô ======
async function loadConfig() {
  try {
    const data = await fs.readFile(CONFIG_FILE, 'utf8');
    clientsConfig = JSON.parse(data);
    console.log('üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞');
  } catch (error) {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    clientsConfig = {};
    await saveConfig();
  }
}

async function saveConfig() {
  try {
    await fs.writeFile(CONFIG_FILE, JSON.stringify(clientsConfig, null, 2));
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// ====== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–†–û–ö–°–ò –°–ï–†–í–ï–†–û–ú ======
async function testRailwayConnection() {
  try {
    const fetch = (await import('node-fetch')).default;
    const response = await fetch(`${PROXY_SERVER_URL}/status`, {
      method: 'GET',
      timeout: 10000
    });
    
    if (response.ok) {
      console.log('‚úÖ Proxy server connection test successful');
      return true;
    } else {
      console.error('‚ùå Proxy server returned:', response.status, response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Failed to connect to proxy server:', error.message);
    return false;
  }
}

async function updateProxyServer() {
  try {
    const fetch = (await import('node-fetch')).default;
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º...');
    console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä URL: ${PROXY_SERVER_URL}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    const currentResponse = await fetch(`${PROXY_SERVER_URL}/api/clients`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 15000
    });
    
    if (!currentResponse.ok) {
      const errorText = await currentResponse.text();
      console.error(`‚ùå Failed to get current clients: ${currentResponse.status} ${errorText}`);
      throw new Error(`Failed to get current clients: ${currentResponse.status}`);
    }
    
    const currentData = await currentResponse.json();
    const currentClients = Object.keys(currentData.clients || {});
    const localClients = Object.keys(clientsConfig);
    
    console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: Local=${localClients.length}, Remote=${currentClients.length}`);
    console.log(`üìã Local clients: [${localClients.join(', ')}]`);
    console.log(`üìã Remote clients: [${currentClients.join(', ')}]`);
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const clientName of currentClients) {
      if (!localClients.includes(clientName)) {
        console.log(`üóë –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${clientName}`);
        const deleteResponse = await fetch(`${PROXY_SERVER_URL}/api/delete-client/${clientName}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          timeout: 15000
        });
        
        if (!deleteResponse.ok) {
          const errorText = await deleteResponse.text();
          console.error(`‚ùå Failed to delete client ${clientName}: ${deleteResponse.status} ${errorText}`);
        } else {
          console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞`);
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const [clientName, config] of Object.entries(clientsConfig)) {
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞: ${clientName}`);
      console.log(`   –ü–∞—Ä–æ–ª—å: ${config.password}`);
      console.log(`   –ü—Ä–æ–∫—Å–∏: ${config.proxies.length} —à—Ç.`);
      
      if (config.proxies.length > 0) {
        console.log(`   –ü–µ—Ä–≤—ã–π –ø—Ä–æ–∫—Å–∏: ${config.proxies[0]}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–∫—Å–∏: ${config.proxies[config.proxies.length - 1]}`);
      }
      
      if (!currentClients.includes(clientName)) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º clientName –∫–∞–∫ –ª–æ–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const requestBody = {
          clientName: clientName,
          password: config.password,
          proxies: config.proxies
        };
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ ${PROXY_SERVER_URL}/api/add-client:`);
        console.log(JSON.stringify(requestBody, null, 2));
        
        const addResponse = await fetch(`${PROXY_SERVER_URL}/api/add-client`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestBody),
          timeout: 15000
        });
        
        if (addResponse.ok) {
          const responseData = await addResponse.json();
          console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);
          console.log(`üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, JSON.stringify(responseData, null, 2));
        } else {
          const errorText = await addResponse.text();
          console.error(`‚ùå Failed to add client ${clientName}: ${addResponse.status} ${errorText}`);
          return { success: false, error: `Failed to add client ${clientName}: ${addResponse.status} ${errorText}` };
        }
      } else {
        console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–µ`);
      }
    }
    
    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return { success: true };
    
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º:', error.message);
    console.error('üìã Stack trace:', error.stack);
    return { success: false, error: error.message };
  }
}

// ====== –§–£–ù–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ö–°–ò –ö –°–£–©–ï–°–¢–í–£–Æ–©–ï–ú–£ –ö–õ–ò–ï–ù–¢–£ ======
async function addProxyToClient(clientName, proxyList) {
  try {
    const fetch = (await import('node-fetch')).default;
    
    console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏: ${proxyList.length}`);
    
    for (const proxy of proxyList) {
      console.log(`üåê –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy}`);
      
      const requestBody = {
        clientName: clientName,
        proxy: proxy
      };
      
      const addResponse = await fetch(`${PROXY_SERVER_URL}/api/add-proxy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody),
        timeout: 15000
      });
      
      if (addResponse.ok) {
        const responseData = await addResponse.json();
        console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω: ${proxy}`);
      } else {
        const errorText = await addResponse.text();
        console.error(`‚ùå Failed to add proxy ${proxy}: ${addResponse.status} ${errorText}`);
        return { success: false, error: `Failed to add proxy ${proxy}: ${addResponse.status} ${errorText}` };
      }
    }
    
    console.log(`‚úÖ –í—Å–µ –ø—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
    return { success: true };
    
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error.message);
    return { success: false, error: error.message };
  }
}

// ====== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –° –û–¢–õ–ê–î–ö–û–ô ======
function isAuthorized(userId) {
  const authorized = ADMIN_IDS.includes(userId);
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: userId=${userId}, authorized=${authorized}`);
  return authorized;
}

function isSuperAdmin(userId) {
  const isSuperAdm = userId === SUPER_ADMIN_ID;
  console.log(`üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞: userId=${userId}, SUPER_ADMIN_ID=${SUPER_ADMIN_ID}, result=${isSuperAdm}`);
  return isSuperAdm;
}

function isManager(userId) {
  const isManagerResult = MANAGER_IDS.includes(userId);
  console.log(`üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: userId=${userId}, MANAGER_IDS=[${MANAGER_IDS.join(', ')}], result=${isManagerResult}`);
  return isManagerResult;
}

function getUserRole(userId) {
  if (isSuperAdmin(userId)) return '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω';
  if (isManager(userId)) return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
  return '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
}

// ====== –§–£–ù–ö–¶–ò–ò –ü–ê–†–°–ò–ù–ì–ê –ü–†–û–ö–°–ò ======
function parseProxyList(proxyText) {
  const lines = proxyText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
  const proxies = [];
  const errors = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const parts = line.split(':');
    
    if (parts.length === 4) {
      const [host, port, user, pass] = parts;
      const proxyUrl = `http://${user}:${pass}@${host}:${port}`;
      proxies.push(proxyUrl);
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏ ${i + 1}: ${host}:${port} -> ${proxyUrl}`);
    } else {
      const error = `–°—Ç—Ä–æ–∫–∞ ${i + 1}: "${line}" - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω—É–∂–Ω–æ host:port:user:pass)`;
      errors.push(error);
      console.log(`‚ùå ${error}`);
    }
  }
  
  console.log(`üìä –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${proxies.length} —É—Å–ø–µ—à–Ω–æ, ${errors.length} –æ—à–∏–±–æ–∫`);
  return { proxies, errors };
}

// ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô (–î–õ–Ø –û–¢–õ–ê–î–ö–ò) ======
bot.on('message', (msg) => {
  const userId = msg.from.id;
  const username = msg.from.username || '–±–µ–∑ username';
  const firstName = msg.from.first_name || '–±–µ–∑ –∏–º–µ–Ω–∏';
  
  console.log(`\nüì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:`);
  console.log(`   –û—Ç: ${firstName} (@${username})`);
  console.log(`   ID: ${userId}`);
  console.log(`   –¢–µ–∫—Å—Ç: "${msg.text ? msg.text.substring(0, 100) : '–Ω–µ —Ç–µ–∫—Å—Ç'}${msg.text && msg.text.length > 100 ? '...' : ''}"`);
  console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${isAuthorized(userId)}`);
  console.log(`   –†–æ–ª—å: ${getUserRole(userId)}`);
});

// ====== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ======
bot.onText(/\/start/, async (msg) => {
  const userId = msg.from.id;
  const role = getUserRole(userId);
  
  console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç userId=${userId}, —Ä–æ–ª—å=${role}`);
  
  if (!isAuthorized(userId)) {
    const debugMessage = `
‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.**

üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í–∞—à ID: \`${userId}\`
‚Ä¢ ADMIN_IDS env: \`"${process.env.ADMIN_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"\`
‚Ä¢ SUPER_ADMIN env: \`"${process.env.SUPER_ADMIN || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"\`
‚Ä¢ MANAGER_IDS env: \`"${process.env.MANAGER_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"\`
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã: \`[${ADMIN_IDS.join(', ')}]\`
‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: \`${SUPER_ADMIN_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\`

üìù **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–±):**

**–°–ø–æ—Å–æ–± 1:** –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é \`ADMIN_IDS\`
‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: \`${userId}\`

**–°–ø–æ—Å–æ–± 2:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ \`SUPER_ADMIN\`
‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: \`${userId}\`

**–°–ø–æ—Å–æ–± 3:** –î–æ–±–∞–≤—å—Ç–µ –≤ \`MANAGER_IDS\`
‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: \`${userId}\`
    `;
    return bot.sendMessage(msg.chat.id, debugMessage, { parse_mode: 'Markdown' });
  }
  
  const welcomeMessage = `
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!**

üë§ –í–∞—à–∞ —Ä–æ–ª—å: **${role}**
üÜî –í–∞—à ID: \`${userId}\`

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/clients - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
/addclient - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ (–ü–†–û–°–¢–û–ô –§–û–†–ú–ê–¢)
/deleteclient - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
/addproxy - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/sync - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º

üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
${isSuperAdmin(userId) ? '/manageadmins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏' : ''}
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
  `;
  
  bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/debug/, async (msg) => {
  const userId = msg.from.id;
  
  const debugInfo = `
üîç **–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ ID: \`${userId}\`
‚Ä¢ Username: @${msg.from.username || '–Ω–µ—Ç'}
‚Ä¢ –ò–º—è: ${msg.from.first_name || '–Ω–µ—Ç'}

üîê **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**
‚Ä¢ ADMIN_IDS: \`"${process.env.ADMIN_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"\`
‚Ä¢ SUPER_ADMIN: \`"${process.env.SUPER_ADMIN || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"\`
‚Ä¢ MANAGER_IDS: \`"${process.env.MANAGER_IDS || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"\`

üìä **–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**
‚Ä¢ ADMIN_IDS –º–∞—Å—Å–∏–≤: \`[${ADMIN_IDS.join(', ')}]\`
‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: \`${SUPER_ADMIN_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\`
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: \`[${MANAGER_IDS.join(', ')}]\`

‚úÖ **–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:**
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${isAuthorized(userId) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}
‚Ä¢ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: ${isSuperAdmin(userId) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${isManager(userId) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}
‚Ä¢ –†–æ–ª—å: ${getUserRole(userId)}

üåê **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:**
‚Ä¢ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: \`${PROXY_SERVER_URL}\`
‚Ä¢ –ü–æ—Ä—Ç –±–æ—Ç–∞: \`${PORT}\`
‚Ä¢ BOT_TOKEN: ${BOT_TOKEN ? '‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}
  `;
  
  bot.sendMessage(msg.chat.id, debugInfo, { parse_mode: 'Markdown' });
});

bot.onText(/\/clients/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: ${userId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.`);
  }
  
  if (Object.keys(clientsConfig).length === 0) {
    return bot.sendMessage(msg.chat.id, 'üìù –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addclient –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
  }
  
  let message = 'üë• **–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:**\n\n';
  
  for (const [clientName, config] of Object.entries(clientsConfig)) {
    message += `üîπ **${clientName}**\n`;
    message += `   ‚îî –ü–∞—Ä–æ–ª—å: \`${config.password}\`\n`;
    message += `   ‚îî –ü—Ä–æ–∫—Å–∏: ${config.proxies.length} —à—Ç.\n\n`;
  }
  
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

// ‚úÖ –ö–û–ú–ê–ù–î–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ (–£–ü–†–û–©–ï–ù–ù–´–ô –§–û–†–ú–ê–¢)
bot.onText(/\/addclient/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: ${userId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.`);
  }
  
  console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ /addclient –æ—Ç userId=${userId}`);
  
  const instructionMessage = `
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ (–ü–†–û–°–¢–û–ô –§–û–†–ú–ê–¢)**

üìã **–§–æ—Ä–º–∞—Ç:**
–°—Ç—Ä–æ–∫–∞ 1: \`–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\`
–°—Ç—Ä–æ–∫–∏ 2+: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`host:port:user:pass\`

üìù **–ü—Ä–∏–º–µ—Ä:**
\`\`\`
client1 mypassword123
31.129.21.214:9379:gNzocE:fnKaHc
45.91.65.201:9524:gNzocE:fnKaHc
45.91.65.235:9071:gNzocE:fnKaHc
\`\`\`

üí° **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:**
  `;
  
  bot.sendMessage(msg.chat.id, instructionMessage, { parse_mode: 'Markdown' });
  
  bot.once('message', async (response) => {
    if (response.from.id !== userId) return;
    
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞`);
    console.log(`üìù –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    const lines = response.text.trim().split('\n').map(line => line.trim()).filter(line => line.length > 0);
    console.log(`üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
    
    if (lines.length < 1) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–æ–∫—Å–∏.', { parse_mode: 'Markdown' });
    }
    
    // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –§–û–†–ú–ê–¢: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ = –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å
    const firstLineParts = lines[0].split(' ');
    console.log(`üë§ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "${lines[0]}"`);
    console.log(`üîç –ß–∞—Å—Ç–∏: [${firstLineParts.join(', ')}]`);
    
    if (firstLineParts.length !== 2) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å`', { parse_mode: 'Markdown' });
    }
    
    const [clientName, password] = firstLineParts;
    console.log(`üë§ –õ–æ–≥–∏–Ω (clientName): ${clientName}`);
    console.log(`üîê –ü–∞—Ä–æ–ª—å: ${password}`);
    
    if (clientsConfig[clientName]) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ö–ª–∏–µ–Ω—Ç **${clientName}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, { parse_mode: 'Markdown' });
    }
    
    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ (—Å—Ç—Ä–æ–∫–∏ 2 –∏ –¥–∞–ª–µ–µ)
    const proxyLines = lines.slice(1);
    console.log(`üåê –°—Ç—Ä–æ–∫ —Å –ø—Ä–æ–∫—Å–∏: ${proxyLines.length}`);
    
    let proxies = [];
    let errors = [];
    
    if (proxyLines.length > 0) {
      const parseResult = parseProxyList(proxyLines.join('\n'));
      proxies = parseResult.proxies;
      errors = parseResult.errors;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    clientsConfig[clientName] = {
      password,
      proxies
    };
    
    await saveConfig();
    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${proxies.length} –ø—Ä–æ–∫—Å–∏`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
    const updateResult = await updateProxyServer();
    
    let resultMessage = `‚úÖ –ö–ª–∏–µ–Ω—Ç **${clientName}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
    resultMessage += `üîë –õ–æ–≥–∏–Ω: \`${clientName}\`\n`;
    resultMessage += `üîê –ü–∞—Ä–æ–ª—å: \`${password}\`\n`;
    resultMessage += `üìä –ü—Ä–æ–∫—Å–∏: ${proxies.length} —à—Ç.\n`;
    
    if (errors.length > 0) {
      resultMessage += `\n‚ö†Ô∏è **–û—à–∏–±–∫–∏ –≤ –ø—Ä–æ–∫—Å–∏:**\n`;
      errors.slice(0, 5).forEach(error => {
        resultMessage += `‚Ä¢ ${error}\n`;
      });
      if (errors.length > 5) {
        resultMessage += `‚Ä¢ ... –∏ –µ—â–µ ${errors.length - 5} –æ—à–∏–±–æ–∫\n`;
      }
    }
    
    if (!updateResult.success) {
      resultMessage += `\n‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä.\n–û—à–∏–±–∫–∞: ${updateResult.error || 'Unknown error'}`;
    }
    
    bot.sendMessage(msg.chat.id, resultMessage, { parse_mode: 'Markdown' });
  });
});

// ‚úÖ –ö–û–ú–ê–ù–î–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
bot.onText(/\/addproxy/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: ${userId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.`);
  }
  
  console.log(`üåê –ö–æ–º–∞–Ω–¥–∞ /addproxy –æ—Ç userId=${userId}`);
  
  if (Object.keys(clientsConfig).length === 0) {
    return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /addclient');
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
  let clientsList = 'üë• **–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:**\n\n';
  const clientNames = Object.keys(clientsConfig);
  
  for (const [index, clientName] of clientNames.entries()) {
    const config = clientsConfig[clientName];
    clientsList += `${index + 1}. **${clientName}** (${config.proxies.length} –ø—Ä–æ–∫—Å–∏)\n`;
  }
  
  clientsList += `\nüí° **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∏–º—è:**`;
  
  bot.sendMessage(msg.chat.id, clientsList, { parse_mode: 'Markdown' });
  
  bot.once('message', async (clientResponse) => {
    if (clientResponse.from.id !== userId) return;
    
    const clientInput = clientResponse.text.trim();
    let selectedClient = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–º–µ—Ä –∏–ª–∏ –∏–º—è
    if (/^\d+$/.test(clientInput)) {
      const clientIndex = parseInt(clientInput) - 1;
      if (clientIndex >= 0 && clientIndex < clientNames.length) {
        selectedClient = clientNames[clientIndex];
      }
    } else {
      if (clientsConfig[clientInput]) {
        selectedClient = clientInput;
      }
    }
    
    if (!selectedClient) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addproxy –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.');
    }
    
    console.log(`üë§ –í—ã–±—Ä–∞–Ω –∫–ª–∏–µ–Ω—Ç: ${selectedClient}`);
    
    const proxyInstructionMessage = `
üåê **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É "${selectedClient}"**

üìã **–§–æ—Ä–º–∞—Ç:**
–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: \`host:port:user:pass\`

üìù **–ü—Ä–∏–º–µ—Ä:**
\`\`\`
31.129.21.214:9379:gNzocE:fnKaHc
45.91.65.201:9524:gNzocE:fnKaHc
45.91.65.235:9071:gNzocE:fnKaHc
\`\`\`

üí° **–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:**
    `;
    
    bot.sendMessage(msg.chat.id, proxyInstructionMessage, { parse_mode: 'Markdown' });
    
    bot.once('message', async (proxyResponse) => {
      if (proxyResponse.from.id !== userId) return;
      
      console.log(`üåê –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${selectedClient}`);
      
      const parseResult = parseProxyList(proxyResponse.text);
      const { proxies, errors } = parseResult;
      
      if (proxies.length === 0) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: host:port:user:pass');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      clientsConfig[selectedClient].proxies.push(...proxies);
      await saveConfig();
      
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${selectedClient} –ª–æ–∫–∞–ª—å–Ω–æ`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
      const addResult = await addProxyToClient(selectedClient, proxies);
      
      let resultMessage = `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ **${proxies.length}** –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É **${selectedClient}**!\n\n`;
      resultMessage += `üìä –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞: ${clientsConfig[selectedClient].proxies.length} —à—Ç.\n`;
      
      if (errors.length > 0) {
        resultMessage += `\n‚ö†Ô∏è **–û—à–∏–±–∫–∏ –≤ –ø—Ä–æ–∫—Å–∏:**\n`;
        errors.slice(0, 5).forEach(error => {
          resultMessage += `‚Ä¢ ${error}\n`;
        });
        if (errors.length > 5) {
          resultMessage += `‚Ä¢ ... –∏ –µ—â–µ ${errors.length - 5} –æ—à–∏–±–æ–∫\n`;
        }
      }
      
      if (!addResult.success) {
        resultMessage += `\n‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä.\n–û—à–∏–±–∫–∞: ${addResult.error || 'Unknown error'}`;
      }
      
      bot.sendMessage(msg.chat.id, resultMessage, { parse_mode: 'Markdown' });
    });
  });
});

// ‚úÖ –ö–û–ú–ê–ù–î–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
bot.onText(/\/sync/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: ${userId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.`);
  }
  
  console.log(`üîÑ –ö–æ–º–∞–Ω–¥–∞ /sync –æ—Ç userId=${userId}`);
  
  bot.sendMessage(msg.chat.id, 'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º...', { parse_mode: 'Markdown' });
  
  const updateResult = await updateProxyServer();
  
  if (updateResult.success) {
    bot.sendMessage(msg.chat.id, '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', { parse_mode: 'Markdown' });
  } else {
    bot.sendMessage(msg.chat.id, `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n\n\`${updateResult.error || 'Unknown error'}\``, { parse_mode: 'Markdown' });
  }
});

bot.onText(/\/status/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) {
    return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–∞—à ID: ${userId}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.`);
  }
  
  const totalClients = Object.keys(clientsConfig).length;
  const totalProxies = Object.values(clientsConfig).reduce((sum, config) => sum + config.proxies.length, 0);
  
  let message = `üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n`;
  message += `üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}\n`;
  message += `üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${totalProxies}\n`;
  message += `üîó –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${PROXY_SERVER_URL}\n\n`;
  
  if (totalClients > 0) {
    message += `üìã **–î–µ—Ç–∞–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:**\n`;
    for (const [clientName, config] of Object.entries(clientsConfig)) {
      message += `‚Ä¢ **${clientName}**: ${config.proxies.length} –ø—Ä–æ–∫—Å–∏\n`;
    }
  }
  
  const connectionOk = await testRailwayConnection();
  message += `\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${connectionOk ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}`;
  
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

// ====== HTTP –°–ï–†–í–ï–† ======
app.get('/', (req, res) => {
  res.send(`
    <h1>ü§ñ Telegram Proxy Manager Bot (SIMPLE FORMAT)</h1>
    <p>Bot is running with simple format: login + password + proxies!</p>
    <p>ADMIN_IDS env: "${process.env.ADMIN_IDS || 'NOT SET'}"</p>
    <p>SUPER_ADMIN env: "${process.env.SUPER_ADMIN || 'NOT SET'}"</p>
    <p>MANAGER_IDS env: "${process.env.MANAGER_IDS || 'NOT SET'}"</p>
    <p>Parsed ADMIN_IDS: [${ADMIN_IDS.join(', ')}]</p>
    <p>Super Admin: ${SUPER_ADMIN_ID || 'NOT SET'}</p>
    <p>Managers: [${MANAGER_IDS.join(', ')}]</p>
    <p>Total clients: ${Object.keys(clientsConfig).length}</p>
    <p>Total proxies: ${Object.values(clientsConfig).reduce((sum, config) => sum + config.proxies.length, 0)}</p>
    <p>Proxy Server URL: ${PROXY_SERVER_URL}</p>
  `);
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    clients: Object.keys(clientsConfig).length,
    proxies: Object.values(clientsConfig).reduce((sum, config) => sum + config.proxies.length, 0),
    adminIds: ADMIN_IDS,
    superAdmin: SUPER_ADMIN_ID,
    managers: MANAGER_IDS,
    proxyServerUrl: PROXY_SERVER_URL,
    envVars: {
      ADMIN_IDS: process.env.ADMIN_IDS || 'NOT SET',
      SUPER_ADMIN: process.env.SUPER_ADMIN || 'NOT SET',
      MANAGER_IDS: process.env.MANAGER_IDS || 'NOT SET'
    }
  });
});

// ====== –ó–ê–ü–£–°–ö ======
async function startBot() {
  await loadConfig();
  await testRailwayConnection();
  await updateProxyServer();
  
  app.listen(PORT, () => {
    console.log(`üåê HTTP server running on port ${PORT}`);
  });
  
  console.log('ü§ñ Telegram Bot —Å –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üîë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: ${SUPER_ADMIN_ID}`);
  console.log(`üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: ${MANAGER_IDS.join(', ')}`);
  console.log(`üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${CONFIG_FILE}`);
  console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä URL: ${PROXY_SERVER_URL}`);
}

bot.on('error', (error) => {
  console.error('‚ùå Telegram Bot Error:', error.message);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå Polling Error:', error.message);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

startBot().catch(console.error);
