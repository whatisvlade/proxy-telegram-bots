// telegram-bot.js ‚Äî Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs').promises;
const path = require('path');

// ====== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ======
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_IDS = (process.env.ADMIN_IDS || '').split(',').map(id => parseInt(id.trim())).filter(Boolean);
const SUPER_ADMIN_ID = ADMIN_IDS[0]; // –ü–µ—Ä–≤—ã–π ID = —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
const MANAGER_IDS = ADMIN_IDS.slice(1); // –û—Å—Ç–∞–ª—å–Ω—ã–µ = –º–µ–Ω–µ–¥–∂–µ—Ä—ã

const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || 'http://localhost:8080';
const API_AUTH = Buffer.from(`${process.env.API_USERNAME || 'telegram_bot'}:${process.env.API_PASSWORD || 'bot_secret_2024'}`).toString('base64');

const CONFIG_FILE = path.join(__dirname, 'clients-config.json');
const PORT = process.env.PORT || 8080;

// ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const app = express();
app.use(express.json());

let clientsConfig = {};

// ====== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô ======
async function loadConfig() {
  try {
    const data = await fs.readFile(CONFIG_FILE, 'utf8');
    clientsConfig = JSON.parse(data);
    console.log('üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞');
  } catch (error) {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    clientsConfig = {};
    await saveConfig();
  }
}

async function saveConfig() {
  try {
    await fs.writeFile(CONFIG_FILE, JSON.stringify(clientsConfig, null, 2));
    console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// ====== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–†–û–ö–°–ò –°–ï–†–í–ï–†–û–ú ======
async function testRailwayConnection() {
  try {
    const fetch = (await import('node-fetch')).default;
    const response = await fetch(`${PROXY_SERVER_URL}/status`, {
      method: 'GET',
      timeout: 10000
    });
    
    if (response.ok) {
      console.log('‚úÖ Proxy server connection test successful');
      return true;
    } else {
      console.error('‚ùå Proxy server returned:', response.status, response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Failed to connect to proxy server:', error.message);
    return false;
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const pendingRequests = new Set();

async function updateProxyServer() {
  const requestKey = 'update_proxy_server';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å
  if (pendingRequests.has(requestKey)) {
    console.log('‚è≥ Update proxy server request already in progress, skipping...');
    return { success: false, message: 'Request already in progress' };
  }
  
  pendingRequests.add(requestKey);
  
  try {
    const fetch = (await import('node-fetch')).default;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
    const currentResponse = await fetch(`${PROXY_SERVER_URL}/api/clients`, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${API_AUTH}`,
        'Content-Type': 'application/json'
      },
      timeout: 15000
    });
    
    if (!currentResponse.ok) {
      throw new Error(`Failed to get current clients: ${currentResponse.status}`);
    }
    
    const currentData = await currentResponse.json();
    const currentClients = Object.keys(currentData.clients || {});
    const localClients = Object.keys(clientsConfig);
    
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: Local=${localClients.length}, Remote=${currentClients.length}`);
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const clientName of currentClients) {
      if (!localClients.includes(clientName)) {
        console.log(`üóë –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${clientName}`);
        await fetch(`${PROXY_SERVER_URL}/api/delete-client/${clientName}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Basic ${API_AUTH}`,
            'Content-Type': 'application/json'
          },
          timeout: 15000
        });
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const [clientName, config] of Object.entries(clientsConfig)) {
      if (!currentClients.includes(clientName)) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
        const addResponse = await fetch(`${PROXY_SERVER_URL}/api/add-client`, {
          method: 'POST',
          headers: {
            'Authorization': `Basic ${API_AUTH}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            clientName,
            password: config.password,
            proxies: config.proxies
          }),
          timeout: 15000
        });
        
        if (!addResponse.ok) {
          const errorText = await addResponse.text();
          console.error(`‚ùå Failed to add client ${clientName}:`, addResponse.status, errorText);
        }
      }
    }
    
    console.log('‚úÖ Proxy server updated successfully');
    return { success: true };
    
  } catch (error) {
    console.error('‚ö†Ô∏è Failed to update proxy server:', error.message);
    return { success: false, error: error.message };
  } finally {
    pendingRequests.delete(requestKey);
  }
}

// ====== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ======
function isAuthorized(userId) {
  return ADMIN_IDS.includes(userId);
}

function isSuperAdmin(userId) {
  return userId === SUPER_ADMIN_ID;
}

function isManager(userId) {
  return MANAGER_IDS.includes(userId);
}

function getUserRole(userId) {
  if (isSuperAdmin(userId)) return '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω';
  if (isManager(userId)) return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
  return '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
}

// ====== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ======
bot.onText(/\/start/, async (msg) => {
  const userId = msg.from.id;
  const role = getUserRole(userId);
  
  if (!isAuthorized(userId)) {
    return bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
  }
  
  const welcomeMessage = `
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!**

üë§ –í–∞—à–∞ —Ä–æ–ª—å: **${role}**
üÜî –í–∞—à ID: \`${userId}\`

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/clients - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
/add_client - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
/delete_client - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
/add_proxy - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
/remove_proxy - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞
/rotate_proxy - –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üîß **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
${isSuperAdmin(userId) ? '/manage_admins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏' : ''}
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
  `;
  
  bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: 'Markdown' });
});

bot.onText(/\/clients/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) return;
  
  if (Object.keys(clientsConfig).length === 0) {
    return bot.sendMessage(msg.chat.id, 'üìù –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_client –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
  }
  
  let message = 'üë• **–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:**\n\n';
  
  for (const [clientName, config] of Object.entries(clientsConfig)) {
    message += `üîπ **${clientName}**\n`;
    message += `   ‚îî –ü–∞—Ä–æ–ª—å: \`${config.password}\`\n`;
    message += `   ‚îî –ü—Ä–æ–∫—Å–∏: ${config.proxies.length} —à—Ç.\n\n`;
  }
  
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

bot.onText(/\/add_client/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) return;
  
  bot.sendMessage(msg.chat.id, '‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞ –ø–∞—Ä–æ–ª—å`\n\n–ü—Ä–∏–º–µ—Ä: `client1 mypassword123`', { parse_mode: 'Markdown' });
  
  bot.once('message', async (response) => {
    if (response.from.id !== userId) return;
    
    const parts = response.text.trim().split(' ');
    if (parts.length !== 2) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞ –ø–∞—Ä–æ–ª—å`', { parse_mode: 'Markdown' });
    }
    
    const [clientName, password] = parts;
    
    if (clientsConfig[clientName]) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ö–ª–∏–µ–Ω—Ç **${clientName}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, { parse_mode: 'Markdown' });
    }
    
    clientsConfig[clientName] = {
      password,
      proxies: []
    };
    
    await saveConfig();
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const updateResult = await updateProxyServer();
    
    if (updateResult.success) {
      bot.sendMessage(msg.chat.id, `‚úÖ –ö–ª–∏–µ–Ω—Ç **${clientName}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüîë –ü–∞—Ä–æ–ª—å: \`${password}\`\nüìä –ü—Ä–æ–∫—Å–∏: 0 —à—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_proxy –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏.`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä.\n\n–û—à–∏–±–∫–∞: ${updateResult.error || 'Unknown error'}`, { parse_mode: 'Markdown' });
    }
  });
});

bot.onText(/\/delete_client/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) return;
  
  if (Object.keys(clientsConfig).length === 0) {
    return bot.sendMessage(msg.chat.id, 'üìù –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
  }
  
  const clientsList = Object.keys(clientsConfig).map(name => `‚Ä¢ ${name}`).join('\n');
  bot.sendMessage(msg.chat.id, `üóë **–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞**\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n${clientsList}\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`, { parse_mode: 'Markdown' });
  
  bot.once('message', async (response) => {
    if (response.from.id !== userId) return;
    
    const clientName = response.text.trim();
    
    if (!clientsConfig[clientName]) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ö–ª–∏–µ–Ω—Ç **${clientName}** –Ω–µ –Ω–∞–π–¥–µ–Ω.`, { parse_mode: 'Markdown' });
    }
    
    const proxiesCount = clientsConfig[clientName].proxies.length;
    delete clientsConfig[clientName];
    
    await saveConfig();
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const updateResult = await updateProxyServer();
    
    if (updateResult.success) {
      bot.sendMessage(msg.chat.id, `‚úÖ –ö–ª–∏–µ–Ω—Ç **${clientName}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\nüìä –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: ${proxiesCount} —à—Ç.`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä.\n\n–û—à–∏–±–∫–∞: ${updateResult.error || 'Unknown error'}`, { parse_mode: 'Markdown' });
    }
  });
});

bot.onText(/\/add_proxy/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) return;
  
  if (Object.keys(clientsConfig).length === 0) {
    return bot.sendMessage(msg.chat.id, 'üìù –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é /add_client');
  }
  
  const clientsList = Object.keys(clientsConfig).map(name => `‚Ä¢ ${name}`).join('\n');
  bot.sendMessage(msg.chat.id, `‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏**\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n${clientsList}\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞ host:port:user:pass\`\n\n–ü—Ä–∏–º–µ—Ä: \`client1 31.44.190.27:9625:512sdn:M0HBKk\``, { parse_mode: 'Markdown' });
  
  bot.once('message', async (response) => {
    if (response.from.id !== userId) return;
    
    const parts = response.text.trim().split(' ');
    if (parts.length !== 2) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞ host:port:user:pass`', { parse_mode: 'Markdown' });
    }
    
    const [clientName, proxyString] = parts;
    
    if (!clientsConfig[clientName]) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ö–ª–∏–µ–Ω—Ç **${clientName}** –Ω–µ –Ω–∞–π–¥–µ–Ω.`, { parse_mode: 'Markdown' });
    }
    
    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç http://user:pass@host:port
    const proxyParts = proxyString.split(':');
    if (proxyParts.length !== 4) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `host:port:user:pass`', { parse_mode: 'Markdown' });
    }
    
    const [host, port, user, pass] = proxyParts;
    const proxyUrl = `http://${user}:${pass}@${host}:${port}`;
    
    if (clientsConfig[clientName].proxies.includes(proxyUrl)) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ü—Ä–æ–∫—Å–∏ **${host}:${port}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞ **${clientName}**.`, { parse_mode: 'Markdown' });
    }
    
    clientsConfig[clientName].proxies.push(proxyUrl);
    await saveConfig();
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    const updateResult = await updateProxyServer();
    
    if (updateResult.success) {
      bot.sendMessage(msg.chat.id, `‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É **${clientName}**!\n\nüåê –ü—Ä–æ–∫—Å–∏: \`${host}:${port}\`\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${clientsConfig[clientName].proxies.length} —à—Ç.`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(msg.chat.id, `‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä.\n\n–û—à–∏–±–∫–∞: ${updateResult.error || 'Unknown error'}`, { parse_mode: 'Markdown' });
    }
  });
});

bot.onText(/\/status/, async (msg) => {
  const userId = msg.from.id;
  if (!isAuthorized(userId)) return;
  
  const totalClients = Object.keys(clientsConfig).length;
  const totalProxies = Object.values(clientsConfig).reduce((sum, config) => sum + config.proxies.length, 0);
  
  let message = `üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n`;
  message += `üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}\n`;
  message += `üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${totalProxies}\n`;
  message += `üîó –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${PROXY_SERVER_URL}\n\n`;
  
  if (totalClients > 0) {
    message += `üìã **–î–µ—Ç–∞–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:**\n`;
    for (const [clientName, config] of Object.entries(clientsConfig)) {
      message += `‚Ä¢ **${clientName}**: ${config.proxies.length} –ø—Ä–æ–∫—Å–∏\n`;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
  const connectionOk = await testRailwayConnection();
  message += `\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${connectionOk ? '‚úÖ OK' : '‚ùå –û—à–∏–±–∫–∞'}`;
  
  bot.sendMessage(msg.chat.id, message, { parse_mode: 'Markdown' });
});

// ====== HTTP –°–ï–†–í–ï–† ======
app.get('/', (req, res) => {
  res.send(`
    <h1>ü§ñ Telegram Proxy Manager Bot</h1>
    <p>Bot is running and ready to manage proxy clients!</p>
    <p>Total clients: ${Object.keys(clientsConfig).length}</p>
    <p>Total proxies: ${Object.values(clientsConfig).reduce((sum, config) => sum + config.proxies.length, 0)}</p>
  `);
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    clients: Object.keys(clientsConfig).length,
    proxies: Object.values(clientsConfig).reduce((sum, config) => sum + config.proxies.length, 0)
  });
});

// ====== –ó–ê–ü–£–°–ö ======
async function startBot() {
  await loadConfig();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
  await testRailwayConnection();
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
  await updateProxyServer();
  
  app.listen(PORT, () => {
    console.log(`üåê HTTP server running on port ${PORT}`);
  });
  
  console.log('ü§ñ Telegram Bot —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üîë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: ${SUPER_ADMIN_ID}`);
  console.log(`üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: ${MANAGER_IDS.join(', ')}`);
  console.log(`üìÅ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${CONFIG_FILE}`);
  console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä URL: ${PROXY_SERVER_URL}`);
  console.log(`üîê API Auth: ${process.env.API_USERNAME || 'telegram_bot'}:${process.env.API_PASSWORD || 'bot_secret_2024'}`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('‚ùå Telegram Bot Error:', error.message);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå Polling Error:', error.message);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

startBot().catch(console.error);
