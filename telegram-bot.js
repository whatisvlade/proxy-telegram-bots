// telegram-bot-fixed-admin.js - Telegram Bot —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞–º–∏ —á–µ—Ä–µ–∑ + –∏ -
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID);
const RAILWAY_PROXY_URL = process.env.RAILWAY_PROXY_URL || 'https://railway-proxy-server-production-58a1.up.railway.app';

// PROXY6.net API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROXY6_API_KEY = process.env.PROXY6_API_KEY;
const PROXY6_BASE_URL = 'https://proxy6.net/api';

// –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const ADMINS_FILE = path.join(__dirname, 'admins.json');
const USER_STATES_FILE = path.join(__dirname, 'user_states.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω—ã
let admins = {};
let userStates = {};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
async function loadAdmins() {
    try {
        const data = await fs.readFile(ADMINS_FILE, 'utf8');
        admins = JSON.parse(data);
        console.log('‚úÖ –ê–¥–º–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
    } catch (error) {
        console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∞–¥–º–∏–Ω–æ–≤');
        admins = {};
        await saveAdmins();
    }
}

async function saveAdmins() {
    try {
        await fs.writeFile(ADMINS_FILE, JSON.stringify(admins, null, 2));
        console.log('üíæ –ê–¥–º–∏–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error.message);
    }
}

async function loadUserStates() {
    try {
        const data = await fs.readFile(USER_STATES_FILE, 'utf8');
        userStates = JSON.parse(data);
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏–π');
        userStates = {};
        await saveUserStates();
    }
}

async function saveUserStates() {
    try {
        await fs.writeFile(USER_STATES_FILE, JSON.stringify(userStates, null, 2));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error.message);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function isSuperAdmin(userId) {
    return userId === SUPER_ADMIN_ID;
}

function isAdmin(userId) {
    return isSuperAdmin(userId) || admins.hasOwnProperty(userId.toString());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
function formatProxyForRailway(proxy) {
    // PROXY6.net –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { host, port, user, pass, type }
    // Railway –æ–∂–∏–¥–∞–µ—Ç: "http://user:pass@host:port"

    if (typeof proxy === 'string') {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ http://user:pass@host:port
        if (proxy.startsWith('http://') && proxy.includes('@')) {
            return proxy;
        }
        
        // –ï—Å–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        const parts = proxy.split(':');
        if (parts.length === 4) {
            const [host, port, user, pass] = parts;
            return `http://${user}:${pass}@${host}:${port}`;
        }
        
        return proxy; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    }

    // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –æ—Ç PROXY6.net
    if (proxy.host && proxy.port && proxy.user && proxy.pass) {
        return `http://${proxy.user}:${proxy.pass}@${proxy.host}:${proxy.port}`;
    }

    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:', proxy);
    return null;
}

// PROXY6.net API —Ñ—É–Ω–∫—Ü–∏–∏
async function checkProxy6Balance() {
    try {
        const response = await axios.get(`${PROXY6_BASE_URL}/${PROXY6_API_KEY}/getbalance`);
        if (response.data.status === 'yes') {
            return {
                success: true,
                balance: response.data.balance,
                currency: response.data.currency
            };
        }
        return { success: false, error: response.data.error || 'Unknown error' };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ PROXY6:', error.message);
        return { success: false, error: error.message };
    }
}

async function getProxy6Price(count = 1, period = 7, version = 3) {
    try {
        const response = await axios.get(`${PROXY6_BASE_URL}/${PROXY6_API_KEY}/getprice`, {
            params: {
                count,
                period,
                version
            }
        });
        
        if (response.data.status === 'yes') {
            return {
                success: true,
                price: response.data.price,
                pricePerProxy: response.data.price_single,
                currency: response.data.currency
            };
        }
        return { success: false, error: response.data.error || 'Unknown error' };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã PROXY6:', error.message);
        return { success: false, error: error.message };
    }
}

async function buyProxy6Proxies(count = 1, period = 7, country = 'ru', version = 3, type = 'http') {
    try {
        const response = await axios.get(`${PROXY6_BASE_URL}/${PROXY6_API_KEY}/buy`, {
            params: {
                count,
                period,
                country,
                version,
                type
            }
        });
        
        if (response.data.status === 'yes') {
            const proxies = [];
            const proxyList = response.data.list || {};
            
            Object.values(proxyList).forEach(proxy => {
                const formattedProxy = `${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`;
                proxies.push(formattedProxy);
            });
            
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –æ—Ç PROXY6`);
            console.log(`üìã –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–∫—Å–∏:`, proxies.slice(0, 3));
            
            return {
                success: true,
                proxies,
                orderId: response.data.order_id,
                count: response.data.count,
                price: response.data.price
            };
        }
        return { success: false, error: response.data.error || 'Unknown error' };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ PROXY6:', error.message);
        return { success: false, error: error.message };
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Railway Proxy Server
async function addClientToProxyServer(clientName, password, proxies = []) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Railway
        const formattedProxies = proxies.map(proxy => formatProxyForRailway(proxy)).filter(p => p !== null);
        
        console.log(`üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ${clientName} —Å ${formattedProxies.length} –ø—Ä–æ–∫—Å–∏`);
        
        const response = await axios.post(`${RAILWAY_PROXY_URL}/api/add-client`, {
            clientName,
            password,
            proxies: formattedProxies
        });
        
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error.response?.data?.error || error.message);
        return { success: false, error: error.response?.data?.error || error.message };
    }
}

async function removeClientFromProxyServer(clientName) {
    try {
        const response = await axios.delete(`${RAILWAY_PROXY_URL}/api/delete-client/${clientName}`);
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error.response?.data?.error || error.message);
        return { success: false, error: error.response?.data?.error || error.message };
    }
}

async function addProxyToClient(clientName, proxy) {
    try {
        const formattedProxy = formatProxyForRailway(proxy);
        if (!formattedProxy) {
            return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏' };
        }
        
        const response = await axios.post(`${RAILWAY_PROXY_URL}/api/add-proxy`, {
            clientName,
            proxy: formattedProxy
        });
        
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error.response?.data?.error || error.message);
        return { success: false, error: error.response?.data?.error || error.message };
    }
}

async function removeProxyFromClient(clientName, proxy) {
    try {
        const response = await axios.delete(`${RAILWAY_PROXY_URL}/api/remove-proxy`, {
            data: {
                clientName,
                proxy
            }
        });
        
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error.response?.data?.error || error.message);
        return { success: false, error: error.response?.data?.error || error.message };
    }
}

async function rotateClientProxy(clientName) {
    try {
        const response = await axios.post(`${RAILWAY_PROXY_URL}/api/rotate-client`, {
            clientName
        });
        
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:', error.response?.data?.error || error.message);
        return { success: false, error: error.response?.data?.error || error.message };
    }
}

async function getClientsFromProxyServer() {
    try {
        const response = await axios.get(`${RAILWAY_PROXY_URL}/api/clients`);
        return { success: true, data: response.data };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', error.response?.data?.error || error.message);
        return { success: false, error: error.response?.data?.error || error.message };
    }
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getMainKeyboard() {
    return {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'],
            ['üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏'],
            ['üí∞ –ë–∞–ª–∞–Ω—Å PROXY6', 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏'],
            ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    };
}

function getAdminKeyboard() {
    return {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'],
            ['üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', 'üîô –ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function clearUserState(userId) {
    delete userStates[userId];
    saveUserStates();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/^\/start$/, async (msg) => {
    const userId = msg.from.id;
    
    if (!isAdmin(userId)) {
        return bot.sendMessage(userId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    clearUserState(userId);
    
    const welcomeMessage = `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net
‚Ä¢ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ PROXY6

${isSuperAdmin(userId) ? 'üëë –í—ã —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω - –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏' : 'üë§ –í—ã –∞–¥–º–∏–Ω - –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

    await bot.sendMessage(userId, welcomeMessage, {
        reply_markup: getMainKeyboard()
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const userId = msg.from.id;
    const text = msg.text;
    
    if (!isAdmin(userId)) {
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ —á–µ—Ä–µ–∑ + –∏ -
    if (text && text.startsWith('+') && isSuperAdmin(userId)) {
        const adminIdStr = text.substring(1).trim();
        const adminId = parseInt(adminIdStr);
        
        if (isNaN(adminId)) {
            return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +123456789');
        }
        
        if (admins.hasOwnProperty(adminId.toString())) {
            return bot.sendMessage(userId, '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.');
        }
        
        admins[adminId.toString()] = {
            id: adminId,
            addedBy: userId,
            addedAt: new Date().toISOString()
        };
        
        await saveAdmins();
        
        return bot.sendMessage(userId, `‚úÖ –ê–¥–º–∏–Ω ${adminId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    }
    
    if (text && text.startsWith('-') && isSuperAdmin(userId)) {
        const adminIdStr = text.substring(1).trim();
        const adminId = parseInt(adminIdStr);
        
        if (isNaN(adminId)) {
            return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: -123456789');
        }
        
        if (adminId === SUPER_ADMIN_ID) {
            return bot.sendMessage(userId, '‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞.');
        }
        
        if (!admins.hasOwnProperty(adminId.toString())) {
            return bot.sendMessage(userId, '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.');
        }
        
        delete admins[adminId.toString()];
        await saveAdmins();
        
        return bot.sendMessage(userId, `‚úÖ –ê–¥–º–∏–Ω ${adminId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userStates[userId]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        const menuButtons = [
            '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤', 
            'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏', 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6', 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏',
            'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞',
            'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', 'üîô –ù–∞–∑–∞–¥'
        ];
        
        if (menuButtons.includes(text)) {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É
            clearUserState(userId);
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await handleUserState(userId, text);
            return;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    switch (text) {
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
            await handleAddClientStart(userId);
            break;
            
        case '‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
            await handleDeleteClientStart(userId);
            break;
            
        case 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤':
            await handleListClients(userId);
            break;
            
        case 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏':
            await handleRotateProxyStart(userId);
            break;
            
        case 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6':
            await handleCheckBalance(userId);
            break;
            
        case 'üõí –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏':
            await handleBuyProxyStart(userId);
            break;
            
        case 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏':
            if (isSuperAdmin(userId)) {
                await handleAdminManagement(userId);
            } else {
                await bot.sendMessage(userId, '‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏.');
            }
            break;
            
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞':
            if (isSuperAdmin(userId)) {
                await handleAddAdminStart(userId);
            }
            break;
            
        case '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞':
            if (isSuperAdmin(userId)) {
                await handleDeleteAdminStart(userId);
            }
            break;
            
        case 'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤':
            if (isSuperAdmin(userId)) {
                await handleListAdmins(userId);
            }
            break;
            
        case 'üîô –ù–∞–∑–∞–¥':
            clearUserState(userId);
            await bot.sendMessage(userId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
                reply_markup: getMainKeyboard()
            });
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async function handleUserState(userId, text) {
    const state = userStates[userId];
    
    switch (state.action) {
        case 'add_client_name':
            await handleAddClientName(userId, text);
            break;
            
        case 'add_client_password':
            await handleAddClientPassword(userId, text);
            break;
            
        case 'delete_client':
            await handleDeleteClient(userId, text);
            break;
            
        case 'rotate_proxy':
            await handleRotateProxy(userId, text);
            break;
            
        case 'buy_proxy_client':
            await handleBuyProxyClient(userId, text);
            break;
            
        case 'add_admin':
            await handleAddAdmin(userId, text);
            break;
            
        case 'delete_admin':
            await handleDeleteAdmin(userId, text);
            break;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function handleAddClientStart(userId) {
    userStates[userId] = { action: 'add_client_name' };
    await saveUserStates();
    
    await bot.sendMessage(userId, 'üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:');
}

async function handleAddClientName(userId, clientName) {
    if (!clientName || clientName.length < 2) {
        return bot.sendMessage(userId, '‚ùå –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    }
    
    userStates[userId] = { 
        action: 'add_client_password',
        clientName: clientName.trim()
    };
    await saveUserStates();
    
    await bot.sendMessage(userId, `üìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ "${clientName}":`);
}

async function handleAddClientPassword(userId, password) {
    if (!password || password.length < 4) {
        return bot.sendMessage(userId, '‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    }
    
    const { clientName } = userStates[userId];
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω PROXY6
    let proxies = [];
    if (PROXY6_API_KEY) {
        await bot.sendMessage(userId, 'üõí –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...');
        
        const buyResult = await buyProxy6Proxies(30, 7, 'ru', 4, 'http');
        if (buyResult.success) {
            proxies = buyResult.proxies;
            await bot.sendMessage(userId, `‚úÖ –ö—É–ø–ª–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –∑–∞ ${buyResult.price} RUB`);
        } else {
            await bot.sendMessage(userId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏: ${buyResult.error}`);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
    const result = await addClientToProxyServer(clientName, password, proxies);
    
    if (result.success) {
        await bot.sendMessage(userId, `‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ${proxies.length} –ø—Ä–æ–∫—Å–∏!`, {
            reply_markup: getMainKeyboard()
        });
    } else {
        await bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.error}`, {
            reply_markup: getMainKeyboard()
        });
    }
    
    clearUserState(userId);
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
async function handleDeleteClientStart(userId) {
    const clientsResult = await getClientsFromProxyServer();
    
    if (!clientsResult.success) {
        return bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsResult.error}`);
    }
    
    const clients = Object.keys(clientsResult.data.clients);
    
    if (clients.length === 0) {
        return bot.sendMessage(userId, 'üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
    
    userStates[userId] = { action: 'delete_client' };
    await saveUserStates();
    
    const clientsList = clients.map((name, index) => `${index + 1}. ${name}`).join('\n');
    await bot.sendMessage(userId, `üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –∏–º—è):\n\n${clientsList}`);
}

async function handleDeleteClient(userId, clientName) {
    const result = await removeClientFromProxyServer(clientName.trim());
    
    if (result.success) {
        await bot.sendMessage(userId, `‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`, {
            reply_markup: getMainKeyboard()
        });
    } else {
        await bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.error}`, {
            reply_markup: getMainKeyboard()
        });
    }
    
    clearUserState(userId);
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
async function handleListClients(userId) {
    const result = await getClientsFromProxyServer();
    
    if (!result.success) {
        return bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${result.error}`);
    }
    
    const clients = result.data.clients;
    const clientNames = Object.keys(clients);
    
    if (clientNames.length === 0) {
        return bot.sendMessage(userId, 'üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.');
    }
    
    let message = `üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (${clientNames.length}):\n\n`;
    
    clientNames.forEach((name, index) => {
        const client = clients[name];
        message += `${index + 1}. üë§ ${name}\n`;
        message += `   üìä –ü—Ä–æ–∫—Å–∏: ${client.totalProxies}\n`;
        message += `   üîÑ –†–æ—Ç–∞—Ü–∏–π: ${client.rotationCount}\n`;
        message += `   üåê –¢–µ–∫—É—â–∏–π: ${client.currentProxy || '–Ω–µ—Ç'}\n`;
        message += `   üîó –¢—É–Ω–Ω–µ–ª–∏: ${client.activeTunnels}\n\n`;
    });
    
    await bot.sendMessage(userId, message);
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
async function handleRotateProxyStart(userId) {
    const clientsResult = await getClientsFromProxyServer();
    
    if (!clientsResult.success) {
        return bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsResult.error}`);
    }
    
    const clients = Object.keys(clientsResult.data.clients);
    
    if (clients.length === 0) {
        return bot.sendMessage(userId, 'üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏.');
    }
    
    userStates[userId] = { action: 'rotate_proxy' };
    await saveUserStates();
    
    const clientsList = clients.map((name, index) => `${index + 1}. ${name}`).join('\n');
    await bot.sendMessage(userId, `üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ (–≤–≤–µ–¥–∏—Ç–µ –∏–º—è):\n\n${clientsList}`);
}

async function handleRotateProxy(userId, clientName) {
    const result = await rotateClientProxy(clientName.trim());
    
    if (result.success) {
        const data = result.data;
        await bot.sendMessage(userId, 
            `‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–ª—è "${clientName}" —É—Å–ø–µ—à–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω!\n\n` +
            `üîÑ –†–æ—Ç–∞—Ü–∏—è #${data.rotationCount}\n` +
            `üìä –°—Ç–∞—Ä—ã–π: ${data.oldProxy || '–Ω–µ—Ç'}\n` +
            `üÜï –ù–æ–≤—ã–π: ${data.newProxy || '–Ω–µ—Ç'}\n` +
            `üîó –ó–∞–∫—Ä—ã—Ç–æ —Ç—É–Ω–Ω–µ–ª–µ–π: ${data.closedTunnels}`,
            { reply_markup: getMainKeyboard() }
        );
    } else {
        await bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: ${result.error}`, {
            reply_markup: getMainKeyboard()
        });
    }
    
    clearUserState(userId);
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–ª–∞–Ω—Å–∞ PROXY6
async function handleCheckBalance(userId) {
    if (!PROXY6_API_KEY) {
        return bot.sendMessage(userId, '‚ùå PROXY6 API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    }
    
    await bot.sendMessage(userId, 'üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å PROXY6...');
    
    const result = await checkProxy6Balance();
    
    if (result.success) {
        await bot.sendMessage(userId, 
            `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6:\n\n` +
            `üíµ ${result.balance} ${result.currency}`
        );
    } else {
        await bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${result.error}`);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏
async function handleBuyProxyStart(userId) {
    const clientsResult = await getClientsFromProxyServer();
    
    if (!clientsResult.success) {
        return bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clientsResult.error}`);
    }
    
    const clients = Object.keys(clientsResult.data.clients);
    
    if (clients.length === 0) {
        return bot.sendMessage(userId, 'üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞.');
    }
    
    userStates[userId] = { action: 'buy_proxy_client' };
    await saveUserStates();
    
    const clientsList = clients.map((name, index) => `${index + 1}. ${name}`).join('\n');
    await bot.sendMessage(userId, `üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ (–≤–≤–µ–¥–∏—Ç–µ –∏–º—è):\n\n${clientsList}`);
}

async function handleBuyProxyClient(userId, clientName) {
    if (!PROXY6_API_KEY) {
        clearUserState(userId);
        return bot.sendMessage(userId, '‚ùå PROXY6 API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.', {
            reply_markup: getMainKeyboard()
        });
    }
    
    await bot.sendMessage(userId, 'üõí –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–∫—Å–∏...');
    
    const buyResult = await buyProxy6Proxies(30, 7, 'ru', 4, 'http');
    
    if (!buyResult.success) {
        clearUserState(userId);
        return bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${buyResult.error}`, {
            reply_markup: getMainKeyboard()
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É
    let addedCount = 0;
    for (const proxy of buyResult.proxies) {
        const addResult = await addProxyToClient(clientName.trim(), proxy);
        if (addResult.success) {
            addedCount++;
        }
    }
    
    await bot.sendMessage(userId, 
        `‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
        `üõí –ó–∞–∫–∞–∑: ${buyResult.orderId}\n` +
        `üí∞ –¶–µ–Ω–∞: ${buyResult.price} RUB\n` +
        `üì¶ –ö—É–ø–ª–µ–Ω–æ: ${buyResult.proxies.length} –ø—Ä–æ–∫—Å–∏\n` +
        `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ "${clientName}": ${addedCount} –ø—Ä–æ–∫—Å–∏`,
        { reply_markup: getMainKeyboard() }
    );
    
    clearUserState(userId);
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
async function handleAdminManagement(userId) {
    await bot.sendMessage(userId, 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏:', {
        reply_markup: getAdminKeyboard()
    });
}

async function handleAddAdminStart(userId) {
    userStates[userId] = { action: 'add_admin' };
    await saveUserStates();
    
    await bot.sendMessage(userId, '‚ûï –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:\n\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: +123456789');
}

async function handleAddAdmin(userId, adminIdText) {
    const adminId = parseInt(adminIdText.trim());
    
    if (isNaN(adminId)) {
        return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    }
    
    if (admins.hasOwnProperty(adminId.toString())) {
        clearUserState(userId);
        return bot.sendMessage(userId, '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.', {
            reply_markup: getAdminKeyboard()
        });
    }
    
    admins[adminId.toString()] = {
        id: adminId,
        addedBy: userId,
        addedAt: new Date().toISOString()
    };
    
    await saveAdmins();
    
    clearUserState(userId);
    
    await bot.sendMessage(userId, `‚úÖ –ê–¥–º–∏–Ω ${adminId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, {
        reply_markup: getAdminKeyboard()
    });
}

async function handleDeleteAdminStart(userId) {
    const adminIds = Object.keys(admins);
    
    if (adminIds.length === 0) {
        return bot.sendMessage(userId, 'üì≠ –ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
    
    userStates[userId] = { action: 'delete_admin' };
    await saveUserStates();
    
    let message = '‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n';
    adminIds.forEach(id => {
        const admin = admins[id];
        message += `üë§ ${id} (–¥–æ–±–∞–≤–ª–µ–Ω ${new Date(admin.addedAt).toLocaleDateString()})\n`;
    });
    
    message += '\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: -123456789';
    
    await bot.sendMessage(userId, message);
}

async function handleDeleteAdmin(userId, adminIdText) {
    const adminId = parseInt(adminIdText.trim());
    
    if (isNaN(adminId)) {
        return bot.sendMessage(userId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∞–¥–º–∏–Ω–∞:');
    }
    
    if (adminId === SUPER_ADMIN_ID) {
        clearUserState(userId);
        return bot.sendMessage(userId, '‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞.', {
            reply_markup: getAdminKeyboard()
        });
    }
    
    if (!admins.hasOwnProperty(adminId.toString())) {
        clearUserState(userId);
        return bot.sendMessage(userId, '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.', {
            reply_markup: getAdminKeyboard()
        });
    }
    
    delete admins[adminId.toString()];
    await saveAdmins();
    
    clearUserState(userId);
    
    await bot.sendMessage(userId, `‚úÖ –ê–¥–º–∏–Ω ${adminId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`, {
        reply_markup: getAdminKeyboard()
    });
}

async function handleListAdmins(userId) {
    const adminIds = Object.keys(admins);
    
    let message = `üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n`;
    message += `üëë ${SUPER_ADMIN_ID} (–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω)\n\n`;
    
    if (adminIds.length === 0) {
        message += 'üì≠ –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤.';
    } else {
        adminIds.forEach(id => {
            const admin = admins[id];
            message += `üë§ ${id}\n`;
            message += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${new Date(admin.addedAt).toLocaleDateString()}\n`;
            message += `   üë§ –ö–µ–º: ${admin.addedBy}\n\n`;
        });
    }
    
    message += `\nüí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`;
    message += `‚ûï +123456789 - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n`;
    message += `‚ûñ -123456789 - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞`;
    
    await bot.sendMessage(userId, message);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error.message);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        await loadAdmins();
        await loadUserStates();
        
        console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω!');
        console.log(`üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: ${SUPER_ADMIN_ID}`);
        console.log(`üîß Railway Proxy URL: ${RAILWAY_PROXY_URL}`);
        console.log(`üîë PROXY6 API: ${PROXY6_API_KEY ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
        console.log(`üë• –ê–¥–º–∏–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${Object.keys(admins).length}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
        if (SUPER_ADMIN_ID) {
            try {
                await bot.sendMessage(SUPER_ADMIN_ID, 
                    `ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n` +
                    `‚ö° –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç\n` +
                    `üë• –ê–¥–º–∏–Ω–æ–≤: ${Object.keys(admins).length}\n` +
                    `üîë PROXY6: ${PROXY6_API_KEY ? '‚úÖ' : '‚ùå'}\n\n` +
                    `üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏:\n` +
                    `‚ûï +123456789 - –¥–æ–±–∞–≤–∏—Ç—å\n` +
                    `‚ûñ -123456789 - —É–¥–∞–ª–∏—Ç—å`
                );
            } catch (error) {
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

startBot();
