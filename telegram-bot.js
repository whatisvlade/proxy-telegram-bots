const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID);
const PROXY6_API_KEY = process.env.PROXY6_API_KEY;
const RAILWAY_PROXY_URL = process.env.RAILWAY_PROXY_URL || 'https://railway-proxy-server-production-58a1.up.railway.app';
const PORT = process.env.PORT || 8080;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PROXY6
const PROXY6_CONFIG = {
    country: 'ru',
    count: 1,
    period: 7,
    version: 4
};

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –°–æ–∑–¥–∞–Ω–∏–µ Express —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway
const app = express();
app.use(express.json());

// Health check endpoint –¥–ª—è Railway
app.get('/', (req, res) => {
    res.json({
        status: 'OK',
        service: 'Telegram Proxy Bot',
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({
        status: 'healthy',
        bot: 'running',
        admins: Object.keys(admins).length,
        uptime: process.uptime()
    });
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üåê Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
let admins = {};
let userStates = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤
function loadAdmins() {
    try {
        if (fs.existsSync('admins.json')) {
            const data = fs.readFileSync('admins.json', 'utf8');
            admins = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤:', error);
        admins = {};
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
function saveAdmins() {
    try {
        fs.writeFileSync('admins.json', JSON.stringify(admins, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
function isAdmin(userId) {
    return userId === SUPER_ADMIN_ID || admins.hasOwnProperty(userId.toString());
}

function isSuperAdmin(userId) {
    return userId === SUPER_ADMIN_ID;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
function getAdminKeyboard() {
    return {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞', 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤'],
            ['üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏', 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6'],
            ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
function getProxyManagementKeyboard() {
    return {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏', '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏'],
            ['üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏', 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏'],
            ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    };
}

// PROXY6.net API —Ñ—É–Ω–∫—Ü–∏–∏
async function checkProxy6Balance() {
    try {
        const response = await axios.get(`https://proxy6.net/api/${PROXY6_API_KEY}/getbalance`);
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ PROXY6:', error.response?.data || error.message);
        throw error;
    }
}

async function getProxy6Prices() {
    try {
        const response = await axios.get(`https://proxy6.net/api/${PROXY6_API_KEY}/getprice`, {
            params: {
                count: PROXY6_CONFIG.count,
                period: PROXY6_CONFIG.period,
                version: PROXY6_CONFIG.version
            }
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω PROXY6:', error.response?.data || error.message);
        throw error;
    }
}

async function buyProxy6Proxies() {
    try {
        const response = await axios.get(`https://proxy6.net/api/${PROXY6_API_KEY}/buy`, {
            params: {
                count: PROXY6_CONFIG.count,
                period: PROXY6_CONFIG.period,
                country: PROXY6_CONFIG.country,
                version: PROXY6_CONFIG.version
            }
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ PROXY6:', error.response?.data || error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
function formatProxyForRailway(proxy) {
    // PROXY6.net –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { host, port, user, pass, type }
    // Railway –æ–∂–∏–¥–∞–µ—Ç: "host:port:user:pass" –∏–ª–∏ –æ–±—ä–µ–∫—Ç
    
    if (typeof proxy === 'string') {
        return proxy; // –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    }
    
    if (proxy.host && proxy.port && proxy.user && proxy.pass) {
        return `${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`;
    }
    
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏:', proxy);
    return null;
}

// Railway Proxy Server API —Ñ—É–Ω–∫—Ü–∏–∏
async function addClientToProxyServer(clientName, password, proxies = []) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Railway
        const formattedProxies = proxies
            .map(proxy => formatProxyForRailway(proxy))
            .filter(proxy => proxy !== null);

        console.log(`üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ ${clientName} —Å ${formattedProxies.length} –ø—Ä–æ–∫—Å–∏`);
        console.log('üìã –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–∫—Å–∏:', formattedProxies.slice(0, 3));

        const response = await axios.post(`${RAILWAY_PROXY_URL}/api/add-client`, {
            clientName: clientName,
            password: password,
            proxies: formattedProxies
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error.response?.data || error.message);
        throw error;
    }
}

async function getClientsFromProxyServer() {
    try {
        const response = await axios.get(`${RAILWAY_PROXY_URL}/api/clients`);
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data || error.message);
        throw error;
    }
}

async function deleteClientFromProxyServer(clientName) {
    try {
        const response = await axios.delete(`${RAILWAY_PROXY_URL}/api/delete-client/${clientName}`);
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error.response?.data || error.message);
        throw error;
    }
}

async function addProxyToClient(clientName, proxy) {
    try {
        const formattedProxy = formatProxyForRailway(proxy);
        if (!formattedProxy) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏');
        }

        const response = await axios.post(`${RAILWAY_PROXY_URL}/api/add-proxy`, {
            clientName: clientName,
            proxy: formattedProxy
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç—É:', error.response?.data || error.message);
        throw error;
    }
}

async function removeProxyFromClient(clientName, proxy) {
    try {
        const formattedProxy = formatProxyForRailway(proxy);
        if (!formattedProxy) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏');
        }

        const response = await axios.delete(`${RAILWAY_PROXY_URL}/api/remove-proxy`, {
            data: {
                clientName: clientName,
                proxy: formattedProxy
            }
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞:', error.response?.data || error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
async function testProxy(proxy) {
    try {
        const formattedProxy = formatProxyForRailway(proxy);
        if (!formattedProxy) {
            return false;
        }

        const [host, port, user, pass] = formattedProxy.split(':');
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏
        const proxyUrl = `http://${user}:${pass}@${host}:${port}`;
        
        const response = await axios.get('http://httpbin.org/ip', {
            proxy: false,
            httpsAgent: new (require('https').Agent)({
                rejectUnauthorized: false
            }),
            timeout: 10000
        });
        
        return true;
    } catch (error) {
        console.error(`‚ùå –ü—Ä–æ–∫—Å–∏ ${proxy} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:`, error.message);
        return false;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
    const userId = msg.from.id;
    
    if (!isAdmin(userId)) {
        bot.sendMessage(userId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    const welcomeMessage = `üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Proxy Bot!*

üîß *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –Ω–∞ Railway Proxy Server
‚Ä¢ –ú—É–ª—å—Ç–∏-–∞–¥–º–∏–Ω—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏

üëë *–í–∞—à —Å—Ç–∞—Ç—É—Å:* ${isSuperAdmin(userId) ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω' : '–ê–¥–º–∏–Ω'}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;

    bot.sendMessage(userId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: getAdminKeyboard()
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('message', async (msg) => {
    const userId = msg.from.id;
    const text = msg.text;

    if (!isAdmin(userId)) {
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userStates[userId]) {
        await handleUserState(userId, text, msg);
        return;
    }

    switch (text) {
        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞':
            console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç userId=${userId}`);
            userStates[userId] = { action: 'add_client', step: 'name' };
            bot.sendMessage(userId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:');
            break;

        case 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤':
            console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Ç userId=${userId}`);
            await handleListClients(userId);
            break;

        case 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏':
            bot.sendMessage(userId, 'üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–∫—Å–∏:', {
                reply_markup: getProxyManagementKeyboard()
            });
            break;

        case 'üí∞ –ë–∞–ª–∞–Ω—Å PROXY6':
            console.log(`üí∞ –ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞ PROXY6 –æ—Ç userId=${userId}`);
            await handleProxy6Balance(userId);
            break;

        case 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏':
            if (isSuperAdmin(userId)) {
                await handleAdminManagement(userId);
            } else {
                bot.sendMessage(userId, '‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏.');
            }
            break;

        case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await handleStats(userId);
            break;

        case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏':
            userStates[userId] = { action: 'add_proxy', step: 'client' };
            bot.sendMessage(userId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:');
            break;

        case '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏':
            console.log(`‚ûñ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –æ—Ç userId=${userId}`);
            userStates[userId] = { action: 'remove_proxy', step: 'client' };
            bot.sendMessage(userId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:');
            break;

        case 'üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏':
            userStates[userId] = { action: 'rotate_proxy', step: 'client' };
            bot.sendMessage(userId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:');
            break;

        case 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏':
            userStates[userId] = { action: 'list_proxies', step: 'client' };
            bot.sendMessage(userId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–∫—Å–∏:');
            break;

        case 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.sendMessage(userId, 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
                reply_markup: getAdminKeyboard()
            });
            break;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleUserState(userId, text, msg) {
    const state = userStates[userId];

    switch (state.action) {
        case 'add_client':
            if (state.step === 'name') {
                state.clientName = text;
                state.step = 'password';
                bot.sendMessage(userId, 'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:');
            } else if (state.step === 'password') {
                state.password = text;
                await handleAddClient(userId, state.clientName, state.password);
                delete userStates[userId];
            }
            break;

        case 'add_proxy':
            if (state.step === 'client') {
                state.clientName = text;
                state.step = 'proxy';
                bot.sendMessage(userId, 'üåê –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass:');
            } else if (state.step === 'proxy') {
                await handleAddProxyToClient(userId, state.clientName, text);
                delete userStates[userId];
            }
            break;

        case 'remove_proxy':
            if (state.step === 'client') {
                state.clientName = text;
                state.step = 'proxy';
                bot.sendMessage(userId, 'üåê –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ host:port:user:pass:');
            } else if (state.step === 'proxy') {
                await handleRemoveProxyFromClient(userId, state.clientName, text);
                delete userStates[userId];
            }
            break;

        case 'rotate_proxy':
            if (state.step === 'client') {
                await handleRotateProxy(userId, text);
                delete userStates[userId];
            }
            break;

        case 'list_proxies':
            if (state.step === 'client') {
                await handleListClientProxies(userId, text);
                delete userStates[userId];
            }
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
async function handleAddClient(userId, clientName, password) {
    try {
        bot.sendMessage(userId, 'üõí –ü–æ–∫—É–ø–∞—é –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net...');
        
        // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏
        const purchaseResult = await buyProxy6Proxies();
        
        if (purchaseResult.status !== 'yes') {
            bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            return;
        }

        console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ PROXY6:', JSON.stringify(purchaseResult, null, 2));

        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ PROXY6.net
        const proxies = Object.values(purchaseResult.list || {});
        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –æ—Ç PROXY6`);

        if (proxies.length === 0) {
            bot.sendMessage(userId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –æ—Ç PROXY6.net');
            return;
        }

        bot.sendMessage(userId, `‚úÖ –ö—É–ø–ª–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏. –î–æ–±–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç–∞...`);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
        await addClientToProxyServer(clientName, password, proxies);

        bot.sendMessage(userId, `‚úÖ –ö–ª–∏–µ–Ω—Ç "${clientName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ${proxies.length} –ø—Ä–æ–∫—Å–∏!

üîß *–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:*
‚Ä¢ –•–æ—Å—Ç: \`yamabiko.proxy.rlwy.net:38659\`
‚Ä¢ –õ–æ–≥–∏–Ω: \`${clientName}\`
‚Ä¢ –ü–∞—Ä–æ–ª—å: \`${password}\`

üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ –≤–∞—à–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.`, {
            parse_mode: 'Markdown',
            reply_markup: getAdminKeyboard()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
            reply_markup: getAdminKeyboard()
        });
    }
}

async function handleListClients(userId) {
    try {
        const clients = await getClientsFromProxyServer();
        
        if (!clients || clients.length === 0) {
            bot.sendMessage(userId, 'üìã –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }

        let message = 'üìã *–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n';
        clients.forEach((client, index) => {
            message += `${index + 1}. *${client.name}*\n`;
            message += `   üåê –ü—Ä–æ–∫—Å–∏: ${client.proxies ? client.proxies.length : 0}\n`;
            message += `   üîê –ü–∞—Ä–æ–ª—å: \`${client.password}\`\n`;
            message += `   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: \`yamabiko.proxy.rlwy.net:38659\`\n\n`;
        });

        bot.sendMessage(userId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
        bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.');
    }
}

async function handleProxy6Balance(userId) {
    try {
        const balance = await checkProxy6Balance();
        
        if (balance.status === 'yes') {
            bot.sendMessage(userId, `üí∞ *–ë–∞–ª–∞–Ω—Å PROXY6.net:* ${balance.balance} ${balance.currency}`, {
                parse_mode: 'Markdown'
            });
        } else {
            bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balance.error}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ PROXY6.net');
    }
}

async function handleAdminManagement(userId) {
    const adminList = Object.keys(admins).map(id => `‚Ä¢ ${id}`).join('\n');
    const message = `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏*\n\n*–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã:*\n${adminList || '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤'}\n\n*–ö–æ–º–∞–Ω–¥—ã:*\n/add_admin [ID] - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n/remove_admin [ID] - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞`;
    
    bot.sendMessage(userId, message, { parse_mode: 'Markdown' });
}

async function handleStats(userId) {
    try {
        const clients = await getClientsFromProxyServer();
        const totalClients = clients ? clients.length : 0;
        const totalProxies = clients ? clients.reduce((sum, client) => sum + (client.proxies ? client.proxies.length : 0), 0) : 0;
        
        const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\nüë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalClients}\nüåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${totalProxies}\nüëë –ê–¥–º–∏–Ω–æ–≤: ${Object.keys(admins).length + 1}\nüîó –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: \`yamabiko.proxy.rlwy.net:38659\``;
        
        bot.sendMessage(userId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

async function handleAddProxyToClient(userId, clientName, proxy) {
    try {
        await addProxyToClient(clientName, proxy);
        bot.sendMessage(userId, `‚úÖ –ü—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É "${clientName}"`, {
            reply_markup: getAdminKeyboard()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error);
        bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error.message}`, {
            reply_markup: getAdminKeyboard()
        });
    }
}

async function handleRemoveProxyFromClient(userId, clientName, proxy) {
    try {
        await removeProxyFromClient(clientName, proxy);
        bot.sendMessage(userId, `‚úÖ –ü—Ä–æ–∫—Å–∏ —É–¥–∞–ª–µ–Ω —É –∫–ª–∏–µ–Ω—Ç–∞ "${clientName}"`, {
            reply_markup: getAdminKeyboard()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error);
        bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: ${error.message}`, {
            reply_markup: getAdminKeyboard()
        });
    }
}

async function handleRotateProxy(userId, clientName) {
    try {
        const response = await axios.post(`${RAILWAY_PROXY_URL}/api/rotate-client`, {
            clientName: clientName
        });
        bot.sendMessage(userId, `üîÑ –ü—Ä–æ–∫—Å–∏ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ "${clientName}"`, {
            reply_markup: getAdminKeyboard()
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:', error);
        bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: ${error.message}`, {
            reply_markup: getAdminKeyboard()
        });
    }
}

async function handleListClientProxies(userId, clientName) {
    try {
        const clients = await getClientsFromProxyServer();
        const client = clients.find(c => c.name === clientName);
        
        if (!client) {
            bot.sendMessage(userId, `‚ùå –ö–ª–∏–µ–Ω—Ç "${clientName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return;
        }

        if (!client.proxies || client.proxies.length === 0) {
            bot.sendMessage(userId, `üìã –£ –∫–ª–∏–µ–Ω—Ç–∞ "${clientName}" –Ω–µ—Ç –ø—Ä–æ–∫—Å–∏.`);
            return;
        }

        let message = `üìã *–ü—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ "${clientName}":*\n\n`;
        client.proxies.forEach((proxy, index) => {
            message += `${index + 1}. \`${proxy}\`\n`;
        });

        bot.sendMessage(userId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞.');
    }
}

// –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
bot.onText(/\/add_admin (\d+)/, async (msg, match) => {
    const userId = msg.from.id;
    const newAdminId = match[1];

    if (!isSuperAdmin(userId)) {
        bot.sendMessage(userId, '‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.');
        return;
    }

    admins[newAdminId] = {
        id: parseInt(newAdminId),
        addedBy: userId,
        addedAt: new Date().toISOString()
    };

    saveAdmins();
    bot.sendMessage(userId, `‚úÖ –ê–¥–º–∏–Ω ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω.`);
});

bot.onText(/\/remove_admin (\d+)/, async (msg, match) => {
    const userId = msg.from.id;
    const adminId = match[1];

    if (!isSuperAdmin(userId)) {
        bot.sendMessage(userId, '‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.');
        return;
    }

    if (admins[adminId]) {
        delete admins[adminId];
        saveAdmins();
        bot.sendMessage(userId, `‚úÖ –ê–¥–º–∏–Ω ${adminId} —É–¥–∞–ª–µ–Ω.`);
    } else {
        bot.sendMessage(userId, `‚ùå –ê–¥–º–∏–Ω ${adminId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error);
});

process.on('SIGINT', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
    bot.stopPolling();
    process.exit(0);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadAdmins();

console.log(`üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω ID: ${SUPER_ADMIN_ID}`);
console.log(`üë• –ê–¥–º–∏–Ω–æ–≤: ${Object.keys(admins).length}`);
console.log(`üõí PROXY6.net API: ${PROXY6_API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${RAILWAY_PROXY_URL}`);
console.log('üöÄ Telegram Bot –∑–∞–ø—É—â–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏!');
