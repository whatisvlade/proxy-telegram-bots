const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const SUPER_ADMIN_ID = parseInt(process.env.SUPER_ADMIN_ID);
const PROXY_SERVER_URL = process.env.PROXY_SERVER_URL || 'https://railway-proxy-server-production-58a1.up.railway.app';

// PROXY6.net –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROXY6_CONFIG = {
    API_KEY: process.env.PROXY6_API_KEY,
    BASE_URL: 'https://px6.link/api',
    DEFAULT_COUNT: 30,
    DEFAULT_PERIOD: 7,
    DEFAULT_COUNTRY: 'ru',
    DEFAULT_VERSION: 3 // IPv4 Shared
};

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const CLIENTS_FILE = path.join(__dirname, 'clients.json');
const ADMINS_FILE = path.join(__dirname, 'admins.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
let clients = {}; // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { adminId: { clientName: { password, proxies } } }
let admins = [];

function loadClients() {
    try {
        if (fs.existsSync(CLIENTS_FILE)) {
            const data = fs.readFileSync(CLIENTS_FILE, 'utf8');
            clients = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
        clients = {};
    }
}

function saveClients() {
    try {
        fs.writeFileSync(CLIENTS_FILE, JSON.stringify(clients, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    }
}

function loadAdmins() {
    try {
        if (fs.existsSync(ADMINS_FILE)) {
            const data = fs.readFileSync(ADMINS_FILE, 'utf8');
            admins = JSON.parse(data);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–æ–≤:', error);
        admins = [];
    }
}

function saveAdmins() {
    try {
        fs.writeFileSync(ADMINS_FILE, JSON.stringify(admins, null, 2));
        console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –ø–æ –∞–¥–º–∏–Ω–∞–º
function getAdminClients(adminId) {
    if (!clients[adminId]) {
        clients[adminId] = {};
    }
    return clients[adminId];
}

function getAllClients() {
    const allClients = {};
    for (const [adminId, adminClients] of Object.entries(clients)) {
        for (const [clientName, clientData] of Object.entries(adminClients)) {
            allClients[`${clientName}_${adminId}`] = {
                ...clientData,
                adminId: adminId,
                originalName: clientName
            };
        }
    }
    return allClients;
}

function findClientByName(clientName, adminId = null) {
    if (adminId) {
        // –ò—â–µ–º —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        const adminClients = getAdminClients(adminId);
        if (adminClients[clientName]) {
            return {
                client: adminClients[clientName],
                adminId: adminId,
                clientName: clientName
            };
        }
    } else {
        // –ò—â–µ–º —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
        for (const [aId, adminClients] of Object.entries(clients)) {
            if (adminClients[clientName]) {
                return {
                    client: adminClients[clientName],
                    adminId: aId,
                    clientName: clientName
                };
            }
        }
    }
    return null;
}

// PROXY6.net API —Ñ—É–Ω–∫—Ü–∏–∏
async function proxy6Request(method, params = {}) {
    try {
        if (!PROXY6_CONFIG.API_KEY) {
            throw new Error('API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        }

        const queryParams = new URLSearchParams(params).toString();
        const url = `${PROXY6_CONFIG.BASE_URL}/${PROXY6_CONFIG.API_KEY}/${method}${queryParams ? '?' + queryParams : ''}`;
        
        console.log(`üåê PROXY6 –∑–∞–ø—Ä–æ—Å: ${url}`);
        
        const response = await axios.get(url, {
            timeout: 10000,
            headers: {
                'User-Agent': 'TelegramBot/1.0'
            }
        });

        console.log(`üì• PROXY6 –æ—Ç–≤–µ—Ç:`, response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ PROXY6 –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        throw error;
    }
}

async function checkProxy6Balance() {
    try {
        const response = await proxy6Request('');
        if (response.status === 'yes') {
            return {
                success: true,
                balance: response.balance,
                currency: response.currency,
                user_id: response.user_id
            };
        } else {
            return {
                success: false,
                error: response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
        }
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

async function buyProxy6Proxies(count, period, country = 'ru', version = 3, descr = '') {
    try {
        const response = await proxy6Request('buy', {
            count: count,
            period: period,
            country: country,
            version: version,
            descr: descr
        });

        if (response.status === 'yes') {
            return {
                success: true,
                order_id: response.order_id,
                count: response.count,
                price: response.price,
                proxies: response.list
            };
        } else {
            return {
                success: false,
                error: response.error || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏'
            };
        }
    } catch (error) {
        return {
            success: false,
            error: error.message
        };
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
async function makeProxyServerRequest(endpoint, method = 'GET', data = null, auth = null) {
    try {
        const config = {
            method: method,
            url: `${PROXY_SERVER_URL}${endpoint}`,
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        if (auth) {
            config.auth = auth;
        }

        if (data && method !== 'GET') {
            config.data = data;
        }

        console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É: ${method} ${config.url}`);
        if (data) console.log('üì§ –î–∞–Ω–Ω—ã–µ:', data);

        const response = await axios(config);
        console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
        if (error.response) {
            console.error('üì• –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:', error.response.data);
        }
        throw error;
    }
}

async function rotateClientProxy(clientName) {
    try {
        const response = await makeProxyServerRequest('/api/rotate-client', 'POST', {
            name: clientName
        });
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}

async function getCurrentProxy(clientName, password) {
    try {
        const auth = {
            username: clientName,
            password: password
        };
        
        const response = await makeProxyServerRequest(`/current`, 'GET', null, auth);
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}

async function getMyIP(clientName, password) {
    try {
        const auth = {
            username: clientName,
            password: password
        };
        
        const response = await makeProxyServerRequest(`/myip`, 'GET', null, auth);
        return response;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: ${error.message}`);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isAuthorized(userId) {
    return userId === SUPER_ADMIN_ID || admins.includes(userId);
}

function isSuperAdmin(userId) {
    return userId === SUPER_ADMIN_ID;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    const username = msg.from.username || 'Unknown';

    console.log(`üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:`);
    console.log(`   –û—Ç: ${msg.from.first_name} (@${username})`);
    console.log(`   ID: ${userId}`);
    console.log(`   –¢–µ–∫—Å—Ç: "${text}"`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: userId=${userId}, authorized=${isAuthorized(userId)}`);
    if (!isAuthorized(userId)) {
        console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: false`);
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
        return;
    }
    console.log(`   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: true`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    const superAdmin = isSuperAdmin(userId);
    console.log(`üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞: userId=${userId}, SUPER_ADMIN_ID=${SUPER_ADMIN_ID}, result=${superAdmin}`);
    console.log(`   –†–æ–ª—å: ${superAdmin ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω' : '–ê–¥–º–∏–Ω'}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text === '/start') {
        const welcomeMessage = `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxy Manager Bot!

üë§ –í–∞—à–∞ —Ä–æ–ª—å: ${superAdmin ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)' : '–ê–¥–º–∏–Ω (–≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)'}

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/clients - –°–ø–∏—Å–æ–∫ ${superAdmin ? '–≤—Å–µ—Ö' : '–≤–∞—à–∏—Ö'} –∫–ª–∏–µ–Ω—Ç–æ–≤
/addclient - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–∫—Å–∏ (–ü–†–û–°–¢–û–ô –§–û–†–ú–ê–¢)
/deleteclient - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
/addproxy - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
/removeproxy - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/sync - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
/health-detailed - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏, CPU, –∫–ª–∏–µ–Ω—Ç–∞—Ö
/api-stats - –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º

üõí PROXY6.net –∫–æ–º–∞–Ω–¥—ã:
/proxy6 - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PROXY6.net –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
/proxy6-balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å PROXY6.net
/buy-proxies - –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞

üîÑ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥—ã:
/rotate - –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
/current-proxy - –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
/myip - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏

üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:${superAdmin ? '\n/manageadmins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)' : ''}

‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç—Å—è ${PROXY6_CONFIG.DEFAULT_COUNT} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PROXY6_CONFIG.DEFAULT_PERIOD} –¥–Ω–µ–π —á–µ—Ä–µ–∑ PROXY6.net`;

        await bot.sendMessage(chatId, welcomeMessage);
        return;
    }

    // PROXY6.net –∫–æ–º–∞–Ω–¥—ã
    if (text === '/proxy6') {
        const proxy6Info = `üõí PROXY6.net –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞: ${PROXY6_CONFIG.API_KEY ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏: ${PROXY6_CONFIG.DEFAULT_COUNT} —à—Ç.
‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${PROXY6_CONFIG.DEFAULT_PERIOD} –¥–Ω–µ–π
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ${PROXY6_CONFIG.DEFAULT_COUNTRY.toUpperCase()}
‚Ä¢ –¢–∏–ø: IPv4 Shared

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/proxy6-balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/buy-proxies - –ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

‚ÑπÔ∏è –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ–∫—É–ø–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;

        await bot.sendMessage(chatId, proxy6Info);
        return;
    }

    if (text === '/proxy6-balance') {
        console.log(`üí∞ –ö–æ–º–∞–Ω–¥–∞ /proxy6-balance –æ—Ç userId=${userId}`);
        
        if (!PROXY6_CONFIG.API_KEY) {
            await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        const balanceResult = await checkProxy6Balance();
        
        if (balanceResult.success) {
            const message = `üí∞ –ë–∞–ª–∞–Ω—Å PROXY6.net:
üíµ ${balanceResult.balance} ${balanceResult.currency}
üë§ ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${balanceResult.user_id}`;
            await bot.sendMessage(chatId, message);
        } else {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${balanceResult.error}`);
        }
        return;
    }

    if (text === '/buy-proxies') {
        console.log(`üõí –ö–æ–º–∞–Ω–¥–∞ /buy-proxies –æ—Ç userId=${userId}`);
        
        if (!PROXY6_CONFIG.API_KEY) {
            await bot.sendMessage(chatId, '‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return;
        }

        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ? 
                        `${client.originalName} (Admin: ${client.adminId})` : name;
                    const proxyCount = client.proxies ? client.proxies.length : 0;
                    
                    return [{
                        text: `${displayName} (${proxyCount} –ø—Ä–æ–∫—Å–∏)`,
                        callback_data: `buy_proxy_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    // –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if (text === '/rotate') {
        console.log(`üîÑ –ö–æ–º–∞–Ω–¥–∞ /rotate –æ—Ç userId=${userId}`);
        
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ? 
                        `${client.originalName} (Admin: ${client.adminId})` : name;
                    
                    return [{
                        text: `üîÑ ${displayName}`,
                        callback_data: `rotate_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === '/current-proxy') {
        console.log(`üåê –ö–æ–º–∞–Ω–¥–∞ /current-proxy –æ—Ç userId=${userId}`);
        
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ? 
                        `${client.originalName} (Admin: ${client.adminId})` : name;
                    
                    return [{
                        text: `üåê ${displayName}`,
                        callback_data: `current_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üåê –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏:', keyboard);
        return;
    }

    if (text === '/myip') {
        console.log(`üåç –ö–æ–º–∞–Ω–¥–∞ /myip –æ—Ç userId=${userId}`);
        
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
            return;
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: clientNames.map(name => {
                    const client = adminClients[name];
                    const displayName = superAdmin && client.originalName ? 
                        `${client.originalName} (Admin: ${client.adminId})` : name;
                    
                    return [{
                        text: `üåç ${displayName}`,
                        callback_data: `myip_${name}_${superAdmin ? client.adminId || userId : userId}`
                    }];
                })
            }
        };

        await bot.sendMessage(chatId, 'üåç –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP:', keyboard);
        return;
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (text === '/clients') {
        console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ /clients –æ—Ç userId=${userId}`);
        
        const adminClients = superAdmin ? getAllClients() : getAdminClients(userId);
        const clientNames = Object.keys(adminClients);
        
        if (clientNames.length === 0) {
            await bot.sendMessage(chatId, 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç');
            return;
        }

        let message = `üìã –°–ø–∏—Å–æ–∫ ${superAdmin ? '–≤—Å–µ—Ö' : '–≤–∞—à–∏—Ö'} –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n`;
        for (const [name, client] of Object.entries(adminClients)) {
            const displayName = superAdmin && client.originalName ? 
                `${client.originalName} (Admin: ${client.adminId})` : name;
            const proxyCount = client.proxies ? client.proxies.length : 0;
            
            message += `üë§ ${displayName}\n`;
            message += `   üîê –ü–∞—Ä–æ–ª—å: ${client.password}\n`;
            message += `   üåê –ü—Ä–æ–∫—Å–∏: ${proxyCount} —à—Ç.\n\n`;
        }

        await bot.sendMessage(chatId, message);
        return;
    }

    if (text === '/addclient') {
        console.log(`‚ûï –ö–æ–º–∞–Ω–¥–∞ /addclient –æ—Ç userId=${userId}`);
        userStates[userId] = { action: 'adding_client' };
        await bot.sendMessage(chatId, `‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\`

–ù–∞–ø—Ä–∏–º–µ—Ä: \`user123 pass456\`

‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–æ ${PROXY6_CONFIG.DEFAULT_COUNT} —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏ –Ω–∞ ${PROXY6_CONFIG.DEFAULT_PERIOD} –¥–Ω–µ–π
üë§ –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É`, { parse_mode: 'Markdown' });
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userStates[userId]) {
        const state = userStates[userId];
        
        if (state.action === 'adding_client') {
            console.log('üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');
            console.log(`üìù –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            const lines = text.trim().split('\n');
            console.log(`üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
            console.log(`üë§ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: "${lines[0]}"`);
            
            const parts = lines[0].trim().split(/\s+/);
            console.log(`üîç –ß–∞—Å—Ç–∏: [${parts.join(', ')}]`);
            
            if (parts.length < 2) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å');
                return;
            }

            const clientName = parts[0];
            const password = parts[1];
            
            console.log(`üë§ –õ–æ–≥–∏–Ω (clientName): ${clientName}`);
            console.log(`üîê –ü–∞—Ä–æ–ª—å: ${password}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const adminClients = getAdminClients(userId);
            if (adminClients[clientName]) {
                await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ`);
                delete userStates[userId];
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç —É –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            if (superAdmin) {
                const existingClient = findClientByName(clientName);
                if (existingClient) {
                    await bot.sendMessage(chatId, `‚ùå –ö–ª–∏–µ–Ω—Ç ${clientName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –∞–¥–º–∏–Ω–∞ ${existingClient.adminId}`);
                    delete userStates[userId];
                    return;
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            adminClients[clientName] = {
                password: password,
                proxies: []
            };

            console.log(`üåê –°—Ç—Ä–æ–∫ —Å –ø—Ä–æ–∫—Å–∏: 0`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net
            let proxyPurchaseMessage = '';
            if (PROXY6_CONFIG.API_KEY) {
                console.log(`üõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}`);
                
                try {
                    console.log(`üõí –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}`);
                    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: count=${PROXY6_CONFIG.DEFAULT_COUNT}, period=${PROXY6_CONFIG.DEFAULT_PERIOD}, country=${PROXY6_CONFIG.DEFAULT_COUNTRY}, version=${PROXY6_CONFIG.DEFAULT_VERSION}`);
                    
                    const purchaseResult = await buyProxy6Proxies(
                        PROXY6_CONFIG.DEFAULT_COUNT,
                        PROXY6_CONFIG.DEFAULT_PERIOD,
                        PROXY6_CONFIG.DEFAULT_COUNTRY,
                        PROXY6_CONFIG.DEFAULT_VERSION,
                        `client_${clientName}_admin_${userId}`
                    );

                    if (purchaseResult.success) {
                        console.log(`‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω—ã:`, purchaseResult);
                        
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        const proxies = [];
                        for (const [id, proxy] of Object.entries(purchaseResult.proxies)) {
                            proxies.push(`${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`);
                        }
                        
                        adminClients[clientName].proxies = proxies;
                        proxyPurchaseMessage = `\nüõí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫—É–ø–ª–µ–Ω–æ ${purchaseResult.count} –ø—Ä–æ–∫—Å–∏ –∑–∞ ${purchaseResult.price} RUB`;
                        
                        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É ${clientName}`);
                    } else {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${purchaseResult.error}`);
                        proxyPurchaseMessage = `\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ PROXY6.net: ${purchaseResult.error}`;
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏:', error);
                    proxyPurchaseMessage = `\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${error.message}`;
                }
            } else {
                console.log(`‚ùå API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É`);
                proxyPurchaseMessage = '\n‚ö†Ô∏è API –∫–ª—é—á PROXY6.net –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
            }

            saveClients();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            try {
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${clientName}`);
                const serverResponse = await makeProxyServerRequest('/api/add-client', 'POST', {
                    name: clientName,
                    password: password,
                    proxies: adminClients[clientName].proxies
                });

                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä`);
                
                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É!
   üë§ –õ–æ–≥–∏–Ω: ${clientName}
   üîê –ü–∞—Ä–æ–ª—å: ${password}
   üåê –ü—Ä–æ–∫—Å–∏: ${adminClients[clientName].proxies.length} —à—Ç.
   üë®‚Äçüíº –ê–¥–º–∏–Ω: ${userId}${proxyPurchaseMessage}`);

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä:', error);
                await bot.sendMessage(chatId, `‚úÖ –ö–ª–∏–µ–Ω—Ç ${clientName} –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —Å ${adminClients[clientName].proxies.length} –ø—Ä–æ–∫—Å–∏${proxyPurchaseMessage}
‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`);
            }

            delete userStates[userId];
            return;
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
    if (text === '/manageadmins' && superAdmin) {
        const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
        const message = `üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

üìã –¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: ${adminsList}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:
‚Ä¢ \`+123456789\` - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`-123456789\` - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
‚Ä¢ \`list\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤`;

        userStates[userId] = { action: 'managing_admins' };
        await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
    if (userStates[userId] && userStates[userId].action === 'managing_admins' && superAdmin) {
        if (text === 'list') {
            const adminsList = admins.length > 0 ? admins.join(', ') : '–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤';
            await bot.sendMessage(chatId, `üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: ${adminsList}`);
            return;
        }

        if (text.startsWith('+')) {
            const newAdminId = parseInt(text.substring(1));
            if (isNaN(newAdminId)) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                return;
            }

            if (admins.includes(newAdminId)) {
                await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                return;
            }

            admins.push(newAdminId);
            saveAdmins();
            await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã`);
            return;
        }

        if (text.startsWith('-')) {
            const removeAdminId = parseInt(text.substring(1));
            if (isNaN(removeAdminId)) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID');
                return;
            }

            const index = admins.indexOf(removeAdminId);
            if (index === -1) {
                await bot.sendMessage(chatId, `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                return;
            }

            admins.splice(index, 1);
            saveAdmins();
            await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${removeAdminId} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤`);
            return;
        }

        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +ID, -ID –∏–ª–∏ list');
        return;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    console.log(`üîò Callback: ${data} –æ—Ç userId=${userId}`);

    if (!isAuthorized(userId)) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
        return;
    }

    const superAdmin = isSuperAdmin(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('buy_proxy_')) {
        const parts = data.split('_');
        const clientName = parts[2];
        const adminId = parts[3];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }
        
        try {
            const purchaseResult = await buyProxy6Proxies(
                PROXY6_CONFIG.DEFAULT_COUNT,
                PROXY6_CONFIG.DEFAULT_PERIOD,
                PROXY6_CONFIG.DEFAULT_COUNTRY,
                PROXY6_CONFIG.DEFAULT_VERSION,
                `client_${clientName}_admin_${adminId}_manual`
            );

            if (purchaseResult.success) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                const newProxies = [];
                for (const [id, proxy] of Object.entries(purchaseResult.proxies)) {
                    newProxies.push(`${proxy.host}:${proxy.port}:${proxy.user}:${proxy.pass}`);
                }
                
                adminClients[clientName].proxies.push(...newProxies);
                saveClients();

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                try {
                    await makeProxyServerRequest('/api/add-proxy', 'POST', {
                        name: clientName,
                        proxies: newProxies
                    });
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
                }

                await bot.editMessageText(
                    `‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${purchaseResult.count} –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${purchaseResult.price} RUB
üì¶ –ó–∞–∫–∞–∑: #${purchaseResult.order_id}
üåê –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ —É –∫–ª–∏–µ–Ω—Ç–∞: ${adminClients[clientName].proxies.length}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );
            } else {
                await bot.editMessageText(
                    `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Å–∏: ${purchaseResult.error}`,
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );
            }
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('rotate_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }
        
        try {
            const result = await rotateClientProxy(clientName);
            
            await bot.editMessageText(
                `üîÑ –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName} —É—Å–ø–µ—à–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω
üåê –ù–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏: ${result.newProxy || '–°–∫—Ä—ã—Ç'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏
    if (data.startsWith('current_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }
        
        try {
            const result = await getCurrentProxy(clientName, adminClients[clientName].password);
            
            await bot.editMessageText(
                `üåê –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.proxy || '–ù–µ –Ω–∞–π–¥–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP
    if (data.startsWith('myip_')) {
        const parts = data.split('_');
        const clientName = parts[1];
        const adminId = parts[2];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!superAdmin && adminId != userId) {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' });
            return;
        }

        const adminClients = getAdminClients(adminId);
        if (!adminClients[clientName]) {
            await bot.editMessageText('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            await bot.answerCallbackQuery(callbackQuery.id);
            return;
        }
        
        try {
            const result = await getMyIP(clientName, adminClients[clientName].password);
            
            await bot.editMessageText(
                `üåç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ ${clientName}:
üìç ${result.ip || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üåç –°—Ç—Ä–∞–Ω–∞: ${result.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë®‚Äçüíº –ê–¥–º–∏–Ω: ${adminId}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        } catch (error) {
            await bot.editMessageText(
                `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –¥–ª—è ${clientName}: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }

        await bot.answerCallbackQuery(callbackQuery.id);
        return;
    }

    await bot.answerCallbackQuery(callbackQuery.id);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadClients();
loadAdmins();

console.log('üöÄ Telegram Bot –∑–∞–ø—É—â–µ–Ω —Å –º—É–ª—å—Ç–∏-–∞–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º–æ–π!');
console.log(`üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω ID: ${SUPER_ADMIN_ID}`);
console.log(`üë• –ê–¥–º–∏–Ω–æ–≤: ${admins.length}`);
console.log(`üõí PROXY6.net API: ${PROXY6_CONFIG.API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
console.log(`üåê –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: ${PROXY_SERVER_URL}`);

// Health endpoint
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/health', (req, res) => {
    const totalClients = Object.values(clients).reduce((sum, adminClients) => sum + Object.keys(adminClients).length, 0);
    
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        total_clients: totalClients,
        admins_count: admins.length,
        proxy6_configured: !!PROXY6_CONFIG.API_KEY,
        proxy_server: PROXY_SERVER_URL,
        clients_by_admin: Object.fromEntries(
            Object.entries(clients).map(([adminId, adminClients]) => [
                adminId, Object.keys(adminClients).length
            ])
        )
    });
});

app.listen(PORT, () => {
    console.log(`üåê Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
